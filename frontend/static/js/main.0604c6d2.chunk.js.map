{"version":3,"sources":["App/TopHeader/index.js","App/Utils/fetchData.js","App/Utils/AppDispatch.js","App/Utils/processException.js","App/WorkPanels/LoginFormLockedUser/index.js","App/WorkPanels/LoginForm/index.js","App/Utils/MainDoctorPanelDispatch.js","App/Utils/useMainDoctorPanelReducer.js","App/WorkPanels/DoctorPanel/Components/MainMenu/index.js","App/WorkPanels/MainDoctorPanel/Components/InfoBox/index.js","App/WorkPanels/MainDoctorPanel/Components/TabPatients/Menu/index.js","App/WorkPanels/MainDoctorPanel/Components/TabPatients/Search/SearchItem/index.js","App/WorkPanels/MainDoctorPanel/Components/TabPatients/Search/index.js","App/WorkPanels/MainDoctorPanel/Components/TabPatients/TableInfo/index.js","App/WorkPanels/MainDoctorPanel/Components/TabPatients/Paginator/index.js","App/WorkPanels/MainDoctorPanel/Components/TabPatients/TableField/TableRow/index.js","App/WorkPanels/MainDoctorPanel/Components/TabPatients/TableField/index.js","App/WorkPanels/MainDoctorPanel/Components/TabPatients/InsertPatientModal/index.js","App/Utils/makeFixedFormat.js","App/WorkPanels/MainDoctorPanel/Components/TabPatients/InsertCardModal/index.js","App/WorkPanels/MainDoctorPanel/Components/TabPatients/UpdatePatientModal/index.js","App/WorkPanels/MainDoctorPanel/Components/TabPatients/index.js","App/WorkPanels/MainDoctorPanel/Components/TabCardIndex/Menu/index.js","App/WorkPanels/MainDoctorPanel/Components/TabCardIndex/Search/SearchItem/index.js","App/WorkPanels/MainDoctorPanel/Components/TabCardIndex/Search/index.js","App/WorkPanels/MainDoctorPanel/Components/TabCardIndex/TableInfo/index.js","App/WorkPanels/MainDoctorPanel/Components/TabCardIndex/Paginator/index.js","App/WorkPanels/MainDoctorPanel/Components/TabCardIndex/TableField/TableRow/index.js","App/WorkPanels/MainDoctorPanel/Components/TabCardIndex/TableField/index.js","App/WorkPanels/MainDoctorPanel/Components/TabCardIndex/DeleteCardModal/index.js","App/WorkPanels/MainDoctorPanel/Components/TabCardIndex/index.js","App/WorkPanels/MainDoctorPanel/Components/TabChosenCard/Menu/index.js","App/WorkPanels/MainDoctorPanel/Components/TabChosenCard/ChosenCardForm/CardSection/index.js","App/WorkPanels/MainDoctorPanel/Components/TabChosenCard/ChosenCardForm/AddonInputField/index.js","App/WorkPanels/MainDoctorPanel/Components/TabChosenCard/ChosenCardForm/AddonInputAddonField/index.js","App/Utils/cardFields.js","App/WorkPanels/MainDoctorPanel/Components/TabChosenCard/ChosenCardForm/index.js","App/WorkPanels/MainDoctorPanel/Components/TabChosenCard/UpdateChosenCardModal/index.js","App/WorkPanels/MainDoctorPanel/Components/TabChosenCard/index.js","App/WorkPanels/MainDoctorPanel/Components/PrintForm/index.js","App/WorkPanels/DoctorPanel/index.js","App/WorkPanels/MainDoctorPanel/Components/MainMenu/index.js","App/WorkPanels/MainDoctorPanel/Components/TabUsers/Menu/index.js","App/WorkPanels/MainDoctorPanel/Components/TabUsers/InsertUserModal/index.js","App/WorkPanels/MainDoctorPanel/Components/TabUsers/Search/SearchItem/index.js","App/WorkPanels/MainDoctorPanel/Components/TabUsers/Search/index.js","App/WorkPanels/MainDoctorPanel/Components/TabUsers/TableInfo/index.js","App/WorkPanels/MainDoctorPanel/Components/TabUsers/Paginator/index.js","App/WorkPanels/MainDoctorPanel/Components/TabUsers/TableField/TableRow/index.js","App/WorkPanels/MainDoctorPanel/Components/TabUsers/TableField/index.js","App/WorkPanels/MainDoctorPanel/Components/TabUsers/LockUserModal/index.js","App/WorkPanels/MainDoctorPanel/Components/TabUsers/UpdateUserModal/index.js","App/WorkPanels/MainDoctorPanel/Components/TabUsers/index.js","App/WorkPanels/MainDoctorPanel/Components/TabCardsValidation/Menu/index.js","App/WorkPanels/MainDoctorPanel/Components/TabCardsValidation/TableInfo/index.js","App/WorkPanels/MainDoctorPanel/Components/TabCardsValidation/Paginator/index.js","App/WorkPanels/MainDoctorPanel/Components/TabCardsValidation/TableField/TableRow/index.js","App/WorkPanels/MainDoctorPanel/Components/TabCardsValidation/TableField/index.js","App/WorkPanels/MainDoctorPanel/Components/TabCardsValidation/index.js","App/WorkPanels/MainDoctorPanel/index.js","App/WorkPanels/CreatePasswordForm/index.js","App/Workspace/index.js","App/LightCover/index.js","App/Utils/useAppReducer.js","App/index.js","index.js"],"names":["TopHeader","props","Container","fluid","className","Row","Col","xs","icon","faReact","size","faNode","REST_SERVICE_URL","serviceMethod","data","a","startLoad","stopLoad","response","url","fetch","method","credentials","headers","body","JSON","stringify","ok","text","status","statusText","fetchData","AppDispatch","React","createContext","processException","dataObject","errorOccured","message","methodName","representError","errorInfo","alert","indexOf","split","LoginFormLockedUser","appDispatch","useContext","loadingTriggers","type","isLoad","useState","id","usr","pwd","grr","setCredentials","handleChange","e","target","name","value","prevCredentials","handleKeyPress","charCode","doLogin","loadWorkspace","handleClick","userParams","parse","isvalid","userid","userrole","textResponse","panelDataJSON","panelData","lg","Alert","variant","faInfoCircle","Form","Group","Label","Control","onChange","onKeyPress","Button","block","onClick","LoginForm","MainDoctorPanelDispatch","reducer","state","action","infoBox","infoBoxData","panelTabs","paginators","printForm","printFormData","patientsData","patientsSearchFields","insertPatientModal","insertPatientModalData","updatePatientModal","updatePatientModalData","insertCardModal","insertCardModalData","cardIndexData","cardIndexSearchFields","deleteCardModal","deleteCardModalData","usersData","usersSearchFields","insertUserModal","insertUserModalData","lockUserModal","lockUserModalData","updateUserModal","updateUserModalData","cardsValidationData","chosenCardData","updateChosenCardModal","updateChosenCardModalData","useMainDoctorPanelReducer","initialState","useReducer","MainMenu","mainDoctorPanelDispatch","logoutIsClicked","panelID","userID","userFIO","menuButtonIsClicked","menuButtonID","freshPanelTabs","item","ButtonGroup","active","showPatientsTab","showCardIndexTab","showChosenCardTab","InfoBox","show","iconType","faTimesCircle","faCheckCircle","dismissible","onClose","Menu","InputGroup","Prepend","Text","faUserMd","FormControl","disabled","faAddressCard","SearchItem","inputField","useRef","label","mask","handleSearch","currentVal","useEffect","inputElement","current","window","jQuery","on","off","datepicker","params","Inputmask","remove","delayTimer","clearTimeout","setTimeout","trim","ref","defaultValue","Append","faTimes","Search","doSearch","searchParams","Fragment","greedy","patientID","patientAmbnum","format","viewMode","minViewMode","language","patientBirthdate","patientFio","TableInfo","countRows","style","maxWidth","Paginator","curPage","perPage","offset","Math","floor","numberOfPages","ceil","itemClick","pageValue","attributes","pagenum","tabPatientsPage","parseInt","items","endItem","amoutOfItems","i","push","Pagination","Item","key","First","Prev","Next","Last","TableRow","patientHeight","handleSelectCurrentCards","patientIDIsRed","tabCardIndexPage","showUsersTab","showCardValidationTab","OverlayTrigger","placement","overlay","Tooltip","title","idVal","fioVal","birthdateVal","heightVal","ambnumVal","faPencilAlt","patientIDVal","patientFioVal","faFileMedical","faArrowRight","TableField","tableRows","rowItems","map","toString","Table","striped","InsertPatientModal","fioInput","birthdateInput","heightInput","ambnumInput","birthdate","height","maskSettings","oncomplete","onincomplete","handleClose","handleAdd","newPatient","fio","ambnum","Modal","onHide","Header","closeButton","Title","Body","Footer","makeFixedFormat","val","length","InsertCardModal","userData","cardDateInput","dProcedureIDSelect","cardDate","Date","currentdate","datetime","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","changelogVal","newCard","patientid","date","dprocedureid","changelog","readOnly","as","UpdatePatientModal","handleUpdate","freshPatient","TabPatients","paginatorData","patientsSearchFieldsData","countrows","perpage","rowitems","isRed","backgroundColor","inputmaskData","cardID","printCard","handlePrint","printType","handlePrintI","handlePrintII","handleChoose","jsonResponse","cardIDVal","faTrashAlt","faFileWord","faClipboard","DeleteCardModal","chosenCardID","handleDelete","fields","TabCardIndex","printCardHandler","cardIndexSearchFieldsData","buttonActive","CardSection","titleItems","contentItems","index","column","sm","md","AddonInputField","addonText","controlElement","AddonInputAddonField","preAddonText","postAddonText","cardFields","ChosenCardForm","dcardFields","Object","assign","createRef","cardIDisValid","d6","forEach","d54","faCalendarAlt","d0","faClipboardCheck","faIdBadge","dpatientid","faUserCheck","d1","faDoorOpen","d5","faWeight","d2","faBalanceScale","dwdynamicdetails","dwdynamic","faRulerVertical","d3","faClock","d4","Tabs","defaultActiveKey","Tab","eventKey","d7","d8","faHourglassStart","d9","faSyringe","d10","d11","d12","d13","d14","d15","d16","d17","d18","d19","d20","faCircle","d64","faStethoscope","d21a","d21b","faHeartbeat","d22","d25","Check","inline","d23","defaultChecked","d24","d26","d27","placeholder","d28","d29","d30","d31","d32","d33","d34","d35","d36","d37","d38","d39","d40","d41","d42","d43","d44","d45","d46","d47a","d47b","d48","d49","d50","d51","d52","d53","faThermometerHalf","d60","d59","d61","d62","d63","d55","d56","d57","d58","currentFields","Number","checked","replace","UpdateChosenCardModal","prevFields","anyFieldChanged","changed","handleSave","d_procedure_id","dry_weight","room","device_id","dialyzer_id","gd_period_minutes","inject_speed","dialysate_id","stream_dita","heparin_dose","bolus","vr_heparin_complete","bicarbonate","na","v_uf","sk_k","pre_weight","pre_ap_up","pre_ap_low","pre_pulse","pre_complaint","pre_edema","pre_state_id","pre_breath_changes","pre_wheeze","pre_wheeze_local","pre_heart_rhythm_id","pre_stomach_soft_id","pre_stomach_pain_id","pre_stomach_pain_local","pre_area_avf_id","pre_noise_avf_id","pre_additions","epoetin_alfa","epoetin_beta","aranesp","mircera","post_injection_id","ferrum_dextran","ferrum_sacch","vit_c","vit_b","post_weight","post_ap_up","post_ap_low","post_pulse","ktv","v_perf_blood","v_replacement","pre_glucose","post_glucose","body_temp","electrolyte_ca","electrolyte_k","electrolyte_na","ekg","post_complaint","post_state_id","post_gd_difficulties","post_change_required","post_additions","TabChosenCard","PrintForm","forwardRef","formRef","useImperativeHandle","submit","hidden","DoctorPanel","printFormRef","page","entity","dispatch","selectPatients","selectCards","doSelect","selectData","apiMethod","processResult","patientambnum","patientfio","Provider","activeTab","activeTabs","getActiveTab","InsertUserModal","loginInput","passwordInput","roleSelect","newUser","login","pass","role","userFio","tabUsersPage","userLocked","idUpd","fioUserUpd","loginVal","loginUserUpd","overlayText","textAlign","faIdCard","faLockOpen","faLock","LockUserModal","handleLockUnlock","titleVal","textVal","UpdateUserModal","freshUser","firstlogin","TabUsers","usersSearchFieldsData","tabCardsValidationPage","fieldsToValidate","Badge","faMinusCircle","TabCardsValidation","MainDoctorPanel","selectUsers","validateCards","userfio","CreatePasswordForm","pwdRepeat","updateUser","keepWorkspace","updatedUser","faUserCircle","Workspace","wsID","ID","getWorkPanel","LightCover","isLoading","visibility","opacity","faSpinner","spin","useAppReducer","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0604c6d2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TopHeader.css';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faNode, faReact } from '@fortawesome/free-brands-svg-icons'\r\n\r\nfunction TopHeader(props) {\r\n\r\n    return (\r\n        <Container fluid className=\"sav2-top-header\">\r\n            <Row>\r\n                <Col className=\"justify-content-center align-self-center\">D-CARD-INDEX</Col>\r\n                <Col xs=\"auto\" className=\"justify-content-center align-self-center\"> v 0.3.0</Col>\r\n                <Col xs=\"auto\" className=\"justify-content-center align-self-center\">\r\n                    <FontAwesomeIcon icon={faReact} size=\"3x\" />\r\n                </Col>\r\n                <Col xs=\"auto\" className=\"justify-content-center align-self-center\">\r\n                    <FontAwesomeIcon icon={faNode} size=\"4x\" />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n\r\n}\r\n\r\nexport default TopHeader;","\r\nconst REST_SERVICE_URL = '/dcard/'; //'http://localhost:8889/dcard/';\r\n\r\nasync function fetchData(serviceMethod, data, startLoad = () => {}, stopLoad = () => {}) {\r\n\r\n    let response = null;\r\n\r\n    const url = REST_SERVICE_URL + serviceMethod;\r\n\r\n    startLoad();\r\n\r\n    try {\r\n        response = await fetch(url, {\r\n            method: 'POST',\r\n            credentials: 'same-origin', //'include',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n    } catch(error) {\r\n        stopLoad();\r\n        return 'ERROR_FETCH|' + error;\r\n    }\r\n\r\n    if (response.ok) {\r\n        const text = await response.text();\r\n        stopLoad();\r\n        return text;\r\n    } else {\r\n        stopLoad();\r\n        return 'ERROR_HTTP|' + response.status + ' -- ' + response.statusText;\r\n    }\r\n\r\n}\r\n\r\nexport default fetchData;\r\nexport { REST_SERVICE_URL };\r\n","import React from 'react';\r\n\r\nconst AppDispatch = React.createContext(null);\r\n\r\nexport default AppDispatch;","/**\r\n * Process Error\r\n * @param {Object} dataObject\r\n * <dataObject.message> - special error message for identification of error type\r\n * <dataObject.methodName> - name of method where error has occurred\r\n * <dataObject.representError> - callback for representing error info\r\n * @returns {Boolean} Error either occurred (true) or didn't (false)\r\n */\r\nfunction processException(dataObject) {\r\n    let errorOccured = false;\r\n\r\n    let data = dataObject || {};\r\n    data.message = (typeof data.message === 'undefined') ? 'DEFAULT_MESSAGE' : data.message;\r\n    data.methodName = (typeof data.methodName === 'undefined') ? 'DEFAULT_METHOD' : data.methodName;\r\n    data.representError = (typeof data.representError === 'undefined') ?\r\n        function(errorInfo) { alert(errorInfo); } :\r\n        data.representError;\r\n\r\n    if (data.message === 'ERROR_ACCESS_DENIED') {\r\n        errorOccured = true;\r\n        data.representError('access denied : method -- ' + data.methodName);\r\n    } else if (data.message.indexOf('ERROR_PDO') !== -1) {\r\n        errorOccured = true;\r\n        const errorInfo = data.message.split('|');\r\n        data.representError('PDO Error: (' + errorInfo[1] + ') : method -- ' + data.methodName);\r\n    } else if (data.message === 'CHANGE_IMPOSSIBLE') {\r\n        errorOccured = true;\r\n        data.representError('Изменение\\\\Удаление невозможно');\r\n    } else if (data.message === 'ERROR_POSTDATA_INCORRECT') {\r\n        errorOccured = true;\r\n        data.representError('postdata is incorrect : method -- ' + data.methodName);\r\n    } else if (data.message.indexOf('ERROR_FETCH') !== -1) {\r\n        errorOccured = true;\r\n        const errorInfo = data.message.split('|');\r\n        data.representError('can\\'t fetch data: ' + errorInfo[1]);\r\n    } else if (data.message.indexOf('ERROR_HTTP') !== -1) {\r\n        errorOccured = true;\r\n        const errorInfo = data.message.split('|');\r\n        data.representError('http error: ' + errorInfo[1]);\r\n    } else if (data.message.indexOf('ERROR_WS') !== -1) {\r\n        errorOccured = true;\r\n        const errorInfo = data.message.split('|');\r\n        data.representError('Web service call error: ' + errorInfo[1]);\r\n    }\r\n\r\n    return errorOccured;\r\n}\r\n\r\nexport default processException;","import React, { useState, useContext } from 'react';\r\nimport './LoginFormLockedUser.css';\r\nimport { Row, Col, Form, Button, Alert } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\nimport processException from 'App/Utils/processException';\r\n//import { AppDispatch } from 'App';\r\n\r\n\r\nfunction LoginFormLockedUser(props) {\r\n    const appDispatch = useContext(AppDispatch);\r\n\r\n    const loadingTriggers = [\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];\r\n\r\n    const [credentials, setCredentials] = useState({\r\n        id: 'isuservalid',\r\n        usr: '',\r\n        pwd: '',\r\n        grr: ''\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const target = e.target;\r\n        const name = target.name;\r\n        const value = target.value;\r\n\r\n        setCredentials((prevCredentials) => (\r\n            { ...prevCredentials, [name]: value }\r\n        ));\r\n    };\r\n\r\n    const handleKeyPress = async (e) => {\r\n        const charCode = e.charCode;\r\n        //'Enter' key is pressed\r\n        if (charCode === 13) {\r\n            const userParams = await doLogin();\r\n            loadWorkspace(userParams);\r\n        }\r\n    };\r\n\r\n    const handleClick = async () => {\r\n        const userParams = await doLogin();\r\n        loadWorkspace(userParams);\r\n    };\r\n\r\n    async function loadWorkspace(userParams) {\r\n        if (userParams !== null) {\r\n            const data = JSON.parse(userParams);\r\n\r\n            if (data.isvalid) {\r\n                const textResponse = await fetchData(\r\n                    'load_workspace',\r\n                    { userid: data.userid, userrole: data.userrole },\r\n                    ...loadingTriggers\r\n                );\r\n\r\n                const response = {\r\n                    message: textResponse,\r\n                    methodName: 'LoginForm.loadWorkspace()'\r\n                };\r\n\r\n                if (!processException(response)) {\r\n                    const panelDataJSON = JSON.parse(textResponse);\r\n                    \r\n                    appDispatch({\r\n                        type: 'setPanelData', \r\n                        panelData: panelDataJSON\r\n                    });\r\n                }\r\n            } else {\r\n                appDispatch({ type: 'alertInvalidCredentials' });\r\n            }\r\n        }\r\n    }\r\n\r\n    async function doLogin() {\r\n        const textResponse = await fetchData(\r\n            'login',\r\n            credentials,\r\n            ...loadingTriggers\r\n        );\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: 'LoginForm.doLogin()'\r\n        };\r\n\r\n        if (!processException(response)) {\r\n            return textResponse;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col lg={12}>\r\n                <Alert variant=\"danger\">\r\n                    <FontAwesomeIcon icon={faInfoCircle} size=\"lg\" />\r\n                    &nbsp;Ваша учетная запись заблокирована.\r\n                </Alert>\r\n            </Col>\r\n            <Col lg={12}>\r\n                <Form.Group>\r\n                    <Form.Label>Login:</Form.Label>\r\n                    <Form.Control type=\"text\" name=\"usr\" onChange={handleChange} onKeyPress={handleKeyPress} />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Password:</Form.Label>\r\n                    <Form.Control type=\"password\" name=\"pwd\" onChange={handleChange} onKeyPress={handleKeyPress} />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" size=\"lg\" block onClick={handleClick} >Вход</Button>\r\n            </Col>\r\n        </Row>\r\n    );\r\n\r\n}\r\n\r\nexport default LoginFormLockedUser;\r\n","import React, { useState, useContext } from 'react';\r\nimport './LoginForm.css';\r\nimport { Row, Col, Form, Button } from 'react-bootstrap';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\nimport processException from 'App/Utils/processException';\r\n//import { AppDispatch } from 'App';\r\n\r\n\r\nfunction LoginForm(props) {\r\n    const appDispatch = useContext(AppDispatch);\r\n\r\n    const loadingTriggers = [\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];\r\n\r\n    const [credentials, setCredentials] = useState({\r\n        id: 'isuservalid',\r\n        usr: '',\r\n        pwd: '',\r\n        grr: ''\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const target = e.target;\r\n        const name = target.name;\r\n        const value = target.value;\r\n\r\n        setCredentials((prevCredentials) => (\r\n            { ...prevCredentials, [name]: value }\r\n        ));\r\n    };\r\n\r\n    const handleKeyPress = async (e) => {\r\n        const charCode = e.charCode;\r\n        //'Enter' key is pressed\r\n        if (charCode === 13) {\r\n            const userParams = await doLogin();\r\n            loadWorkspace(userParams);\r\n        }\r\n    };\r\n\r\n    const handleClick = async () => {\r\n        const userParams = await doLogin();\r\n        loadWorkspace(userParams);\r\n    };\r\n\r\n    async function loadWorkspace(userParams) {\r\n        if (userParams !== null) {\r\n            const data = JSON.parse(userParams);\r\n\r\n            if (data.isvalid) {\r\n                const textResponse = await fetchData(\r\n                    'load_workspace',\r\n                    { userid: data.userid, userrole: data.userrole },\r\n                    ...loadingTriggers\r\n                );\r\n\r\n                const response = {\r\n                    message: textResponse,\r\n                    methodName: 'LoginForm.loadWorkspace()'\r\n                };\r\n\r\n                if (!processException(response)) {\r\n                    const panelDataJSON = JSON.parse(textResponse);\r\n                    \r\n                    appDispatch({\r\n                        type: 'setPanelData', \r\n                        panelData: panelDataJSON\r\n                    });\r\n                }\r\n            } else {\r\n                appDispatch({ type: 'alertInvalidCredentials' });\r\n            }\r\n        }\r\n    }\r\n\r\n    async function doLogin() {\r\n        const textResponse = await fetchData(\r\n            'login',\r\n            credentials,\r\n            ...loadingTriggers\r\n        );\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: 'LoginForm.doLogin()'\r\n        };\r\n\r\n        if (!processException(response)) {\r\n            return textResponse;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col lg={12}>\r\n                <Form.Group>\r\n                    <Form.Label>Login:</Form.Label>\r\n                    <Form.Control type=\"text\" name=\"usr\" onChange={handleChange} onKeyPress={handleKeyPress} />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Password:</Form.Label>\r\n                    <Form.Control type=\"password\" name=\"pwd\" onChange={handleChange} onKeyPress={handleKeyPress} />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" size=\"lg\" block onClick={handleClick} >Вход</Button>\r\n            </Col>\r\n        </Row>\r\n    );\r\n\r\n}\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\n\r\nconst MainDoctorPanelDispatch = React.createContext(null);\r\n\r\nexport default MainDoctorPanelDispatch;","import { useReducer } from 'react';\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'setInfoBox':\r\n            return { ...state, infoBox: action.infoBoxData };\r\n        case 'setPanelTabs':\r\n            return { ...state, panelTabs: action.panelTabs };\r\n        case 'setPaginators':\r\n            return {\r\n                ...state,\r\n                paginators: {\r\n                    ...state.paginators,\r\n                    ...action.paginators\r\n                }\r\n            };\r\n        case 'setPrintForm':\r\n            return {...state, printForm: action.printFormData};\r\n        //Patients\r\n        case 'setPatientsData':\r\n            return { ...state, patientsData: action.patientsData };\r\n        case 'setPatientsSearchFields':\r\n            return {\r\n                ...state,\r\n                patientsSearchFields: {\r\n                    ...state.patientsSearchFields,\r\n                    ...action.patientsSearchFields\r\n                }\r\n            };\r\n        case 'setInsertPatientModal':\r\n            return {\r\n                ...state,\r\n                insertPatientModal: {\r\n                    ...state.insertPatientModal,\r\n                    ...action.insertPatientModalData\r\n                }\r\n            };\r\n        case 'setUpdatePatientModal':\r\n            return {\r\n                ...state,\r\n                updatePatientModal: {\r\n                    ...state.updatePatientModal,\r\n                    ...action.updatePatientModalData\r\n                }\r\n            };\r\n        case 'setInsertCardModal':\r\n            return {\r\n                ...state,\r\n                insertCardModal: {\r\n                    ...state.insertCardModal,\r\n                    ...action.insertCardModalData\r\n                }\r\n            };\r\n        //CardIndex\r\n        case 'setCardIndexData':\r\n            return { ...state, cardIndexData: action.cardIndexData };\r\n        case 'setCardIndexSearchFields':\r\n            return {\r\n                ...state,\r\n                cardIndexSearchFields: {\r\n                    ...state.cardIndexSearchFields,\r\n                    ...action.cardIndexSearchFields\r\n                }\r\n            };\r\n        case 'setDeleteCardModal':\r\n            return {\r\n                ...state,\r\n                deleteCardModal: {\r\n                    ...state.deleteCardModal,\r\n                    ...action.deleteCardModalData\r\n                }\r\n            };\r\n        //Users\r\n        case 'setUsersData':\r\n            return { ...state, usersData: action.usersData };\r\n        case 'setUsersSearchFields':\r\n            return {\r\n                ...state,\r\n                usersSearchFields: {\r\n                    ...state.usersSearchFields,\r\n                    ...action.usersSearchFields\r\n                }\r\n            };\r\n        case 'setInsertUserModal':\r\n            return {\r\n                ...state,\r\n                insertUserModal: {\r\n                    ...state.insertUserModal,\r\n                    ...action.insertUserModalData\r\n                }\r\n            };\r\n        case 'setLockUserModal':\r\n            return {\r\n                ...state,\r\n                lockUserModal: {\r\n                    ...state.lockUserModal,\r\n                    ...action.lockUserModalData\r\n                }\r\n            };\r\n        case 'setUpdateUserModal':\r\n            return {\r\n                ...state,\r\n                updateUserModal: {\r\n                    ...state.updateUserModal,\r\n                    ...action.updateUserModalData\r\n                }\r\n            };\r\n        //CardsValidation\r\n        case 'setCardsValidationData':\r\n            return { ...state, cardsValidationData: action.cardsValidationData };\r\n        //ChosenCard\r\n        case 'setChosenCardData':\r\n            return { \r\n                ...state, \r\n                chosenCardData: {\r\n                    ...state.chosenCardData,\r\n                    ...action.chosenCardData \r\n                }\r\n            };\r\n        case 'setUpdateChosenCardModal':\r\n            return {\r\n                ...state,\r\n                updateChosenCardModal: {\r\n                    ...state.updateChosenCardModal,\r\n                    ...action.updateChosenCardModalData\r\n                }\r\n            };    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction useMainDoctorPanelReducer(initialState) {\r\n    return useReducer(reducer, initialState);\r\n}\r\n\r\nexport default useMainDoctorPanelReducer;\r\n","import React, { useContext } from 'react';\r\nimport './MainMenu.css';\r\nimport { Row, Col, Button, ButtonGroup } from 'react-bootstrap';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\nimport processException from 'App/Utils/processException';\r\n//import { AppDispatch } from 'App';\r\n\r\nfunction MainMenu(props) {\r\n    const appDispatch = useContext(AppDispatch);\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const loadingTriggers = [\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];\r\n\r\n    const { data } = props;\r\n\r\n    const logoutIsClicked = async () => {\r\n        const textResponse = await fetchData(\r\n            'logout',\r\n            { id: '0' },\r\n            ...loadingTriggers\r\n        );\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: 'MainDoctorPanel.MainMenu.logoutIsClicked()'\r\n        };\r\n\r\n        if (!processException(response)) {\r\n            appDispatch({\r\n                type: 'setPanelData',\r\n                panelData: {\r\n                    panelID: '0',\r\n                    userID: '',\r\n                    userFIO: ''\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const menuButtonIsClicked = (e) => {\r\n        const menuButtonID = e.target.id;\r\n\r\n        let freshPanelTabs = {};\r\n\r\n        for (let item in data) {\r\n            if (item === menuButtonID) {\r\n                freshPanelTabs[item] = true;\r\n            } else {\r\n                freshPanelTabs[item] = false;\r\n            }\r\n        }\r\n        \r\n        mainDoctorPanelDispatch({\r\n            type: 'setPanelTabs',\r\n            panelTabs: freshPanelTabs\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            <Col lg={12}>\r\n                <ButtonGroup className=\"flex-wrap\">\r\n                    <Button variant=\"outline-secondary\" active={data.showPatientsTab} onClick={menuButtonIsClicked} id=\"showPatientsTab\">Пациенты</Button>\r\n                    <Button variant=\"outline-secondary\" active={data.showCardIndexTab} onClick={menuButtonIsClicked} id=\"showCardIndexTab\">Картотека</Button>\r\n                    <Button variant=\"outline-secondary\" active={data.showChosenCardTab} onClick={menuButtonIsClicked} id=\"showChosenCardTab\">Выбранная карта</Button>\r\n                    <Button variant=\"primary\" onClick={logoutIsClicked} >Выйти</Button>\r\n                </ButtonGroup>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default MainMenu;\r\n","import React, { useContext } from 'react';\r\nimport './InfoBox.css';\r\nimport { Row, Col, Alert } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimesCircle } from '@fortawesome/free-regular-svg-icons';\r\nimport { faInfoCircle, faCheckCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\n\r\nfunction InfoBox(props) {\r\n\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const { variant, text, show } = props.data;\r\n    \r\n    const closeInfoBox = () => {\r\n        mainDoctorPanelDispatch({ type: 'setInfoBox', infoBoxData: {...props.data, show: false} });\r\n    };\r\n\r\n    let iconType = faTimesCircle;\r\n\r\n    switch (variant) {\r\n        case 'danger':\r\n            iconType = faTimesCircle;\r\n            break;\r\n        case 'info':\r\n            iconType = faInfoCircle;\r\n            break;\r\n        case 'success':\r\n            iconType = faCheckCircle;\r\n            break;\r\n        default:\r\n            iconType = faInfoCircle;\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col lg={12}>\r\n                <Alert variant={variant} dismissible onClose={closeInfoBox} show={show} >\r\n                    <FontAwesomeIcon icon={iconType} size=\"lg\" />\r\n                    &nbsp;{text}\r\n                </Alert>\r\n            </Col>\r\n        </Row>\r\n    );\r\n\r\n}\r\n\r\nexport default InfoBox;","import React, { useContext } from 'react';\r\nimport './Menu.css';\r\nimport { Row, Col, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUserMd, faAddressCard } from '@fortawesome/free-solid-svg-icons';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\n\r\nfunction Menu(props) {\r\n\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const { data } = props;\r\n\r\n    const handleClick = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setInsertPatientModal',\r\n            insertPatientModalData: { show: true }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            <Col lg={12}>\r\n                <Row>\r\n                    <Col lg={4}>\r\n                        <InputGroup className=\"sav2-mb-1\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>\r\n                                    <FontAwesomeIcon icon={faUserMd} size=\"1x\" />\r\n                                    &nbsp;Сотрудник:\r\n                                </InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl disabled value={data.userFIO} />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col lg={4}>\r\n                        <Button onClick={handleClick}>\r\n                            <FontAwesomeIcon icon={faAddressCard} size=\"1x\" />\r\n                            &nbsp;Завести пациента \r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Menu;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport './SearchItem.css';\r\nimport { Col, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport Inputmask from 'inputmask';\r\n\r\nfunction SearchItem(props) {\r\n\r\n    const inputField = useRef(null);\r\n\r\n    const {\r\n        size,\r\n        label,\r\n        mask,\r\n        handleSearch,\r\n        name,\r\n        currentVal\r\n    } = props;\r\n\r\n    //Date-Picker -- start --\r\n    //EventListener settings\r\n    useEffect(() => {\r\n        if (mask && mask.type === 'datepicker') {\r\n            const inputElement = inputField.current;\r\n\r\n            window.jQuery(inputElement).on('change', handleChange);\r\n\r\n            return () => {\r\n                window.jQuery(inputElement).off('change', handleChange);\r\n            };\r\n        }//eslint-disable-next-line\r\n    }, []);\r\n    //Datepicker settings\r\n    useEffect(() => {\r\n        if (mask && mask.type === 'datepicker') {\r\n            const inputElement = inputField.current;\r\n\r\n            window.jQuery(inputElement).datepicker(mask.params);\r\n\r\n            return () => {\r\n                window.jQuery(inputElement).datepicker('destroy');\r\n            };\r\n        }//eslint-disable-next-line\r\n    }, []);\r\n    //Date-Picker -- end --\r\n\r\n    //Input-Mask -- start --\r\n    useEffect(() => {\r\n        if (mask && mask.type === 'inputmask') {\r\n            const inputElement = inputField.current;\r\n\r\n            Inputmask(mask.params).mask(inputElement);\r\n\r\n            return () => {\r\n                Inputmask.remove(inputElement);\r\n            };\r\n        }//eslint-disable-next-line\r\n    }, []);\r\n    //Input-Mask -- end --\r\n\r\n    //EventListener for default (without mask property) search-item\r\n    /* useEffect(() => {\r\n        if (!mask) {\r\n            const inputElement = inputField.current;\r\n            inputElement.addEventListener('change', handleChange);\r\n\r\n            return () => {\r\n                inputElement.removeEventListener('change', handleChange);\r\n            };\r\n        }\r\n    }, []); */\r\n\r\n    const searchLatency = 1000;\r\n    let delayTimer = null;\r\n\r\n    const handleChange = () => {\r\n        clearTimeout(delayTimer);\r\n\r\n        delayTimer = setTimeout(function() {\r\n            handleSearch({[name]: inputField.current.value.trim()});\r\n        }, searchLatency);\r\n    };\r\n\r\n    const handleClick = () => {\r\n        const inputElement = inputField.current;\r\n        if (inputElement.value !== '') {\r\n            inputElement.value = '';\r\n            //const ev = new Event('change', { bubbles: true });\r\n            //inputElement.dispatchEvent(ev);\r\n            handleSearch({ [name]: inputElement.value });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Col lg={size} className=\"sav2-mt-1\">\r\n            <InputGroup>\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text>{label}</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl className=\"no-placeholder\" \r\n                    ref={inputField} \r\n                    onChange={handleChange}\r\n                    defaultValue={currentVal} />\r\n                <InputGroup.Append>\r\n                    <Button variant=\"secondary\" onClick={handleClick}>\r\n                        <FontAwesomeIcon icon={faTimes} size=\"1x\" />\r\n                    </Button>\r\n                </InputGroup.Append>\r\n            </InputGroup>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default SearchItem;\r\n","import React, { useContext } from 'react';\r\nimport './Search.css';\r\nimport { Row } from 'react-bootstrap';\r\nimport SearchItem from './SearchItem';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\n\r\n\r\nfunction Search(props) {\r\n\r\n    const { data } = props;\r\n\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const doSearch = (searchParams) => {\r\n        /* setSearchFields((prevSearchFields) => (\r\n            { ...prevSearchFields, ...searchParams }\r\n        )); */\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPatientsSearchFields',\r\n            patientsSearchFields: searchParams\r\n        });\r\n    };\r\n\r\n    const inputmaskData = {\r\n        type: \"inputmask\",\r\n        params: { mask: \"9{0,}\", greedy: false }\r\n    };\r\n\r\n    const datepickerData = {\r\n        type: \"datepicker\",\r\n        params: {\r\n            format: \"dd-mm-yyyy\",\r\n            viewMode: \"months\",\r\n            minViewMode: \"days\",\r\n            language: 'ru'\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <p>Поиск пациентов: </p>\r\n            <Row>\r\n                <SearchItem name=\"patientID\"\r\n                    size={4}\r\n                    label=\"id пациента:\"\r\n                    handleSearch={doSearch}\r\n                    mask={inputmaskData}\r\n                    currentVal={data.patientID} />\r\n                <SearchItem name=\"patientAmbnum\"\r\n                    size={4}\r\n                    label=\"№ амб. карты:\"\r\n                    handleSearch={doSearch}\r\n                    currentVal={data.patientAmbnum} />\r\n                <SearchItem name=\"patientBirthdate\"\r\n                    size={4}\r\n                    label=\"Дата рождения:\"\r\n                    handleSearch={doSearch}\r\n                    mask={datepickerData}\r\n                    currentVal={data.patientBirthdate} />\r\n                <SearchItem name=\"patientFio\"\r\n                    size={8}\r\n                    label=\"ФИО пациента:\"\r\n                    handleSearch={doSearch}\r\n                    currentVal={data.patientFio} />\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport './TableInfo.css';\r\nimport { InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nfunction TableInfo(props) {\r\n\r\n    const { countRows } = props;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <p>Список записей:</p>\r\n            <InputGroup>\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text>Всего найдено записей:</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl disabled value={countRows} style={{maxWidth: '200px'}} />\r\n            </InputGroup>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default TableInfo;\r\n","import React, { useContext } from 'react';\r\nimport './Paginator.css';\r\nimport { Pagination } from 'react-bootstrap';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\n\r\nfunction Paginator(props) {\r\n\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n    \r\n    const { curPage, perPage, countRows } = props;\r\n\r\n    const amoutOfItems = 7;\r\n\r\n    const offset = Math.floor(7 / 2);\r\n\r\n    const numberOfPages = (Math.ceil(countRows / perPage) < 1) ? 1 : Math.ceil(countRows / perPage);\r\n    \r\n    const itemClick = (e) => {\r\n        const pageValue = e.target.attributes.pagenum.value\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabPatientsPage: parseInt(pageValue) }\r\n        });\r\n    };\r\n\r\n    const prevClick = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabPatientsPage: (curPage - 1 < 1) ? 1 : curPage - 1 }\r\n        });\r\n    };\r\n\r\n    const nextClick = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabPatientsPage: ((curPage + 1) > numberOfPages) ? numberOfPages : curPage + 1 }\r\n        });\r\n    };\r\n    \r\n    const firstClick = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabPatientsPage: 1 }\r\n        });\r\n    };\r\n\r\n    const lastClick = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabPatientsPage: numberOfPages }\r\n        });\r\n    };\r\n\r\n    let items = [];\r\n\r\n    const getStartItem = () => {\r\n        if (curPage - offset <= 1) {\r\n            return 1;\r\n        } else {\r\n            if (curPage + amoutOfItems - offset > numberOfPages) {\r\n            /**\r\n             * let \r\n             *  curPage = x,\r\n             *  offset = y,\r\n             *  numberOfPages = z\r\n             * \r\n             * previous items:                   constant previous items at the end:\r\n             * 5 6 7 (8) 9 10 11  ==> 8-3        5 6 7 (8) 9 10 11  ==> 8-3 = 8-3-(3-(11-8))\r\n             * 6 7 8 (9) 10 11    ==> 9-3   >>>  5 6 7 8 (9) 10 11  ==> 9-4 = 9-3-(3-(11-9))\r\n             * 7 8 9 (10) 11      ==> 10-3  >>>  5 6 7 8 9 (10) 11  ==> 10-5 = 10-3-(3-(11-10))\r\n             * 8 9 10 (11)        ==> 11-3       5 6 7 8 9 10 (11)  ==> 11-6 = 11-3-(3-(11-11))\r\n             * \r\n             * the first expression was:\r\n             * x - y - (y - (z - x))\r\n             * \r\n             * modified expression:\r\n             * x - y - y + (z - x)\r\n             * x - 2y + z - x\r\n             * -2y + z\r\n             * z - 2y\r\n             * \r\n             * i.e. numberOfPages - (2 * offset)\r\n             */\r\n                return numberOfPages - (2 * offset);\r\n            } else { \r\n                return curPage - offset;\r\n            }\r\n        }\r\n    };\r\n\r\n    const getEndItem = () => {\r\n        if (curPage - offset <= 1) {\r\n            if (numberOfPages < amoutOfItems) {\r\n                return numberOfPages + 1;\r\n            } else {\r\n                return amoutOfItems + 1;\r\n            }\r\n        } else {\r\n            if (curPage + amoutOfItems - offset > numberOfPages) {\r\n                return numberOfPages + 1;\r\n            } else {\r\n                return curPage + amoutOfItems - offset;\r\n            }\r\n        }\r\n    };\r\n\r\n    const startItem = getStartItem();\r\n    const endItem = getEndItem();\r\n\r\n    for (let i = startItem; i < endItem; i++) {\r\n        items.push(\r\n            <Pagination.Item active={i === curPage}\r\n                key={i}\r\n                onClick={itemClick}\r\n                pagenum={i}>\r\n                {i}\r\n            </Pagination.Item>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Pagination>\r\n            <Pagination.First onClick={firstClick} disabled={curPage === 1} />\r\n            <Pagination.Prev onClick={prevClick} disabled={curPage === 1} />\r\n            {items}\r\n            <Pagination.Next onClick={nextClick} disabled={curPage === numberOfPages} />\r\n            <Pagination.Last onClick={lastClick} disabled={curPage === numberOfPages} />\r\n        </Pagination>\r\n    );\r\n}\r\n\r\nexport default Paginator;\r\n","import React, { useContext } from 'react';\r\nimport './TableRow.css';\r\nimport { OverlayTrigger, Tooltip, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faFileMedical, faArrowRight } from '@fortawesome/free-solid-svg-icons';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\n\r\n\r\nfunction TableRow(props) {\r\n\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const {\r\n        patientID,\r\n        patientFio,\r\n        patientBirthdate,\r\n        patientHeight,\r\n        patientAmbnum\r\n    } = props; \r\n\r\n    const handleUpdateClick = () => {\r\n        //no need to fetch data from 'select_patient_by_id'\r\n        mainDoctorPanelDispatch({\r\n            type: 'setUpdatePatientModal',\r\n            updatePatientModalData: { \r\n                show: true,\r\n                idVal: patientID, \r\n                fioVal: patientFio,\r\n                birthdateVal: patientBirthdate,\r\n                heightVal: patientHeight,\r\n                ambnumVal: patientAmbnum\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleInsertNewCard = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setInsertCardModal',\r\n            insertCardModalData: {\r\n                show: true,\r\n                patientIDVal: patientID,\r\n                patientFioVal: patientFio\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleSelectCurrentCards = async () => {  \r\n\r\n        await mainDoctorPanelDispatch({\r\n            type: 'setCardIndexSearchFields',\r\n            cardIndexSearchFields: { \r\n                patientID: patientID,\r\n                patientIDIsRed: true\r\n            }\r\n        });\r\n\r\n        await mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabCardIndexPage: 1 }\r\n        });\r\n\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPanelTabs',\r\n            panelTabs: {\r\n                showPatientsTab: false,\r\n                showCardIndexTab: true,\r\n                showChosenCardTab: false,\r\n                showUsersTab: false,\r\n                showCardValidationTab: false\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <tr>\r\n            <td>\r\n                <OverlayTrigger\r\n                    placement=\"left\"\r\n                    overlay={<Tooltip id={patientID}>id: {patientID}</Tooltip>}>\r\n                    <span>{patientFio}</span>\r\n                </OverlayTrigger>\r\n            </td>\r\n            <td>{patientBirthdate}</td>\r\n            <td>{patientHeight}</td>\r\n            <td>{patientAmbnum}</td>\r\n            <td>\r\n                <Button variant=\"success\" \r\n                    className=\"sav2-opt-button\" \r\n                    title=\"Изменить данные\" \r\n                    onClick={handleUpdateClick}>\r\n                        <FontAwesomeIcon icon={faPencilAlt} size=\"1x\" />\r\n                </Button>\r\n                <Button variant=\"success\" \r\n                    className=\"sav2-opt-button\" \r\n                    title=\"Завести карту\"\r\n                    onClick={handleInsertNewCard}>\r\n                        <FontAwesomeIcon icon={faFileMedical} size=\"1x\" />\r\n                </Button>\r\n                <Button variant=\"info\" \r\n                    className=\"sav2-opt-button\" \r\n                    title=\"Просмотр текущих карт\"\r\n                    onClick={handleSelectCurrentCards}>\r\n                        <FontAwesomeIcon icon={faArrowRight} size=\"1x\" />\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default TableRow;\r\n","import React from 'react';\r\nimport './TableField.css';\r\nimport { Table } from 'react-bootstrap';\r\nimport TableRow from './TableRow';\r\n\r\n\r\nfunction TableField(props) {\r\n\r\n    const { rowItems } = props;\r\n\r\n    const tableRows = rowItems.map((item) => (\r\n        <TableRow key={(item[0]).toString()}\r\n            patientID={(item[0]).toString()}\r\n            patientFio={item[1]}\r\n            patientBirthdate={item[2]}\r\n            patientHeight={item[3]}\r\n            patientAmbnum={item[4]} />\r\n    ));\r\n\r\n    return (\r\n        <Table striped>\r\n            <thead>\r\n                <tr>\r\n                    <th>ФИО</th>\r\n                    <th>Дата рождения</th>\r\n                    <th>Рост (см)</th>\r\n                    <th>№ амб. карты</th>\r\n                    <th>Действие</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {tableRows}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default TableField;\r\n","import React, { useContext, useRef, useEffect } from 'react';\r\nimport './InsertPatientModal.css';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\nimport Inputmask from 'inputmask';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\nimport processException from 'App/Utils/processException';\r\n\r\nfunction InsertPatientModal(props) {\r\n\r\n    const appDispatch = useContext(AppDispatch);\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const { data } = props;\r\n\r\n    const fioInput = useRef(null);\r\n    const birthdateInput = useRef(null);\r\n    const heightInput = useRef(null);\r\n    const ambnumInput = useRef(null);\r\n\r\n    const loadingTriggers = [\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];\r\n\r\n    //mount datepiker\r\n    useEffect(() => {\r\n        if (data.show) {\r\n            const birthdate = birthdateInput.current;\r\n\r\n            window.jQuery(birthdate).datepicker(\r\n                {\r\n                    format: \"dd-mm-yyyy\",\r\n                    viewMode: \"months\",\r\n                    minViewMode: \"days\",\r\n                    language: 'ru'\r\n                }\r\n            );\r\n\r\n            return () => {\r\n                window.jQuery(birthdate).datepicker('destroy');\r\n            };\r\n        }\r\n    }, [data.show]);\r\n\r\n    //mount inputmask\r\n    useEffect(() => {\r\n        if (data.show) {\r\n            const height = heightInput.current;\r\n\r\n            const maskSettings = {\r\n                mask: \"9{0,3}[.9{0,2}]\",\r\n                greedy: false,\r\n                oncomplete: () => {\r\n                    if (height.value.trim() === '.') {\r\n                        height.value = '0.';\r\n                    }\r\n                },\r\n                onincomplete: () => {\r\n                    if (height.value.trim() === '.') {\r\n                        height.value = '0.';\r\n                    }\r\n                }\r\n            };\r\n\r\n            Inputmask(maskSettings).mask(height);\r\n\r\n            return () => {\r\n                Inputmask.remove(height);\r\n            };\r\n        }\r\n    }, [data.show]);\r\n\r\n    const handleClose = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setInsertPatientModal',\r\n            insertPatientModalData: { show: false }\r\n        });\r\n    };\r\n\r\n    const handleAdd = async () => {\r\n        const newPatient = {\r\n            fio: fioInput.current.value.trim(),\r\n            birthdate: birthdateInput.current.value.trim(),\r\n            height: heightInput.current.value.trim(),\r\n            ambnum: ambnumInput.current.value.trim()\r\n        };\r\n        \r\n        const textResponse = await fetchData(\r\n            'insert_patient',\r\n            newPatient,\r\n            ...loadingTriggers\r\n        );\r\n\r\n        mainDoctorPanelDispatch({\r\n            type: 'setInsertPatientModal',\r\n            insertPatientModalData: { show: false }\r\n        });\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: 'InsertPatientModal.handleAdd()',\r\n            representError: (errorInfo) => {\r\n                mainDoctorPanelDispatch({\r\n                    type: 'setInfoBox',\r\n                    infoBoxData: { variant: 'danger', text: errorInfo, show: true }\r\n                });\r\n            }\r\n        };\r\n\r\n        if (!processException(response)) {\r\n            mainDoctorPanelDispatch({\r\n                type: 'setInfoBox',\r\n                infoBoxData: { variant: 'info', text: textResponse, show: true }\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal show={data.show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Ввод нового пациента</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <p>Данные пациента:</p>\r\n                <Form.Group>\r\n                    <Form.Label>ФИО:</Form.Label>\r\n                    <Form.Control type=\"text\" name=\"fio\" ref={fioInput}></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Дата рождения:</Form.Label>\r\n                    <Form.Control type=\"text\" name=\"birthdate\" ref={birthdateInput}></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Рост:</Form.Label>\r\n                    <Form.Control className=\"no-placeholder\" type=\"text\" name=\"height\" ref={heightInput}></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>№ амбулаторной карты:</Form.Label>\r\n                    <Form.Control type=\"text\" name=\"ambnum\" ref={ambnumInput}></Form.Control>\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={handleAdd}>Добавить</Button>\r\n                <Button variant=\"secondary\" onClick={handleClose}>Отмена</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default InsertPatientModal;\r\n","\r\nfunction makeFixedFormat(val) {\r\n\r\n    const formattedStr = (val.toString().length === 1 ? '0'+val.toString() : val.toString());\r\n    \r\n    return formattedStr;\r\n}\r\n\r\nexport default makeFixedFormat;","import React, { useContext, useRef, useEffect } from 'react';\r\nimport './InsertCardModal.css';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\nimport processException from 'App/Utils/processException';\r\nimport makeFixedFormat from 'App/Utils/makeFixedFormat';\r\n\r\n\r\nfunction InsertCardModal(props) {\r\n\r\n    const appDispatch = useContext(AppDispatch);\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const { data, userData } = props;\r\n\r\n    const cardDateInput = useRef(null);\r\n    const dProcedureIDSelect = useRef(null);\r\n\r\n    const loadingTriggers = [\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];\r\n\r\n    //mount datepiker\r\n    useEffect(() => {\r\n        if (data.show) {\r\n            const cardDate = cardDateInput.current;\r\n\r\n            window.jQuery(cardDate).datepicker(\r\n                {\r\n                    format: \"dd-mm-yyyy\",\r\n                    viewMode: \"months\",\r\n                    minViewMode: \"days\",\r\n                    language: 'ru'\r\n                }\r\n            );\r\n            \r\n            window.jQuery(cardDate).datepicker('update', new Date());\r\n\r\n            return () => {\r\n                window.jQuery(cardDate).datepicker('destroy');\r\n            };\r\n        }\r\n    }, [data.show]);\r\n\r\n    const handleClose = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setInsertCardModal',\r\n            insertCardModalData: { show: false }\r\n        });\r\n    };\r\n\r\n    const handleAdd = async () => {\r\n        const currentdate = new Date(); \r\n\r\n        const datetime = \"creation timestamp: \" \r\n            + makeFixedFormat( currentdate.getDate() ) + \"-\"\r\n            + makeFixedFormat( (currentdate.getMonth()+1) )  + \"-\" \r\n            + currentdate.getFullYear() + \" @ \"  \r\n            + makeFixedFormat( currentdate.getHours() ) + \":\"  \r\n            + makeFixedFormat( currentdate.getMinutes() ) + \":\" \r\n            + makeFixedFormat( currentdate.getSeconds() );\r\n\r\n        const changelogVal = ''+ datetime +' by '+ userData.userFIO +' (id:'+ userData.userID +')';\r\n\r\n        const newCard = {\r\n            patientid: data.patientIDVal,\r\n            date: cardDateInput.current.value.trim(),\r\n            dprocedureid: dProcedureIDSelect.current.value,\r\n            changelog: changelogVal\r\n        };\r\n\r\n        const textResponse = await fetchData(\r\n            'insert_dcard',\r\n            newCard,\r\n            ...loadingTriggers\r\n        );\r\n\r\n        mainDoctorPanelDispatch({\r\n            type: 'setInsertCardModal',\r\n            insertCardModalData: { show: false }\r\n        });\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: 'InsertCardModal.handleAdd()',\r\n            representError: (errorInfo) => {\r\n                mainDoctorPanelDispatch({\r\n                    type: 'setInfoBox',\r\n                    infoBoxData: { variant: 'danger', text: errorInfo, show: true }\r\n                });\r\n            }\r\n        };\r\n\r\n        if (!processException(response)) {\r\n                       \r\n            await mainDoctorPanelDispatch({\r\n                type: 'setCardIndexSearchFields',\r\n                cardIndexSearchFields: { \r\n                    patientID: data.patientIDVal,\r\n                    patientIDIsRed: true\r\n                }\r\n            });\r\n\r\n            await mainDoctorPanelDispatch({\r\n                type: 'setPaginators',\r\n                paginators: { tabCardIndexPage: 1 }\r\n            });\r\n\r\n            await mainDoctorPanelDispatch({\r\n                type: 'setPanelTabs',\r\n                panelTabs: {\r\n                    showPatientsTab: false,\r\n                    showCardIndexTab: true,\r\n                    showChosenCardTab: false,\r\n                    showUsersTab: false,\r\n                    showCardValidationTab: false\r\n                }\r\n            });\r\n    \r\n            mainDoctorPanelDispatch({\r\n                type: 'setInfoBox',\r\n                infoBoxData: { variant: 'info', text: textResponse, show: true }\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal show={data.show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Создание диализной карты</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <p>Данные по карте:</p>\r\n                <Form.Group>\r\n                    <Form.Label>id пациента:</Form.Label>\r\n                    <Form.Control type=\"text\" name=\"patientid\" readOnly value={data.patientIDVal}></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>ФИО пациента:</Form.Label>\r\n                    <Form.Control type=\"text\" name=\"patientfio\" readOnly value={data.patientFioVal}></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Дата процедуры:</Form.Label>\r\n                    <Form.Control type=\"text\" name=\"carddate\" ref={cardDateInput}></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Вид процедуры:</Form.Label>\r\n                    <Form.Control as=\"select\" name=\"dprocedureid\" ref={dProcedureIDSelect}>\r\n                        <option value=\"1\">ГД</option>\r\n                        <option value=\"2\">ГДФ</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={handleAdd}>Добавить</Button>\r\n                <Button variant=\"secondary\" onClick={handleClose}>Отмена</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default InsertCardModal;\r\n","import React, { useContext, useRef, useEffect } from 'react';\r\nimport './UpdatePatientModal.css';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport Inputmask from 'inputmask';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport processException from 'App/Utils/processException';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\n\r\n\r\nfunction UpdatePatientModal(props) {\r\n\r\n    const appDispatch = useContext(AppDispatch);\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const { data } = props;\r\n\r\n    const fioInput = useRef(null);\r\n    const birthdateInput = useRef(null);\r\n    const heightInput = useRef(null);\r\n    const ambnumInput = useRef(null);\r\n\r\n    const loadingTriggers = [\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];\r\n\r\n    //mount datepiker\r\n    useEffect(() => {\r\n        if (data.show) {\r\n            const birthdate = birthdateInput.current;\r\n\r\n            window.jQuery(birthdate).datepicker(\r\n                {\r\n                    format: \"dd-mm-yyyy\",\r\n                    viewMode: \"months\",\r\n                    minViewMode: \"days\",\r\n                    language: 'ru'\r\n                }\r\n            );\r\n\r\n            return () => {\r\n                window.jQuery(birthdate).datepicker('destroy');\r\n            };\r\n        }\r\n    }, [data.show]);\r\n\r\n    //mount inputmask\r\n    useEffect(() => {\r\n        if (data.show) {\r\n            const height = heightInput.current;\r\n\r\n            const maskSettings = {\r\n                mask: \"9{0,3}[.9{0,2}]\",\r\n                greedy: false,\r\n                oncomplete: () => {\r\n                    if (height.value.trim() === '.') {\r\n                        height.value = '0.';\r\n                    }\r\n                },\r\n                onincomplete: () => {\r\n                    if (height.value.trim() === '.') {\r\n                        height.value = '0.';\r\n                    }\r\n                }\r\n            };\r\n\r\n            Inputmask(maskSettings).mask(height);\r\n\r\n            return () => {\r\n                Inputmask.remove(height);\r\n            };\r\n        }\r\n    }, [data.show]);\r\n\r\n    const handleClose = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setUpdatePatientModal',\r\n            updatePatientModalData: { show: false }\r\n        });\r\n    };\r\n\r\n    const handleUpdate = async () => {\r\n        const freshPatient = {\r\n            id: data.idVal,\r\n            fio: fioInput.current.value.trim(),\r\n            birthdate: birthdateInput.current.value.trim(),\r\n            height: heightInput.current.value.trim(),\r\n            ambnum: ambnumInput.current.value.trim() \r\n        };\r\n\r\n        const textResponse = await fetchData(\r\n            'update_patient',\r\n            freshPatient,\r\n            ...loadingTriggers\r\n        );\r\n\r\n        mainDoctorPanelDispatch({\r\n            type: 'setUpdatePatientModal',\r\n            updatePatientModalData: { show: false }\r\n        });\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: 'UpdatePatientModal.handleUpdate()',\r\n            representError: (errorInfo) => {\r\n                mainDoctorPanelDispatch({\r\n                    type: 'setInfoBox',\r\n                    infoBoxData: { variant: 'danger', text: errorInfo, show: true }\r\n                });\r\n            }\r\n        };\r\n\r\n        if (!processException(response)) {\r\n            mainDoctorPanelDispatch({\r\n                type: 'setInfoBox',\r\n                infoBoxData: { variant: 'info', text: textResponse, show: true }\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal show={data.show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Изменение данных пациента</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <p>Данные пациента:</p>\r\n                <Form.Group>\r\n                    <Form.Label>ФИО:</Form.Label>\r\n                    <Form.Control type=\"text\"\r\n                        name=\"fio\"\r\n                        ref={fioInput}\r\n                        defaultValue={data.fioVal}></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Дата рождения:</Form.Label>\r\n                    <Form.Control type=\"text\"\r\n                        name=\"birthdate\"\r\n                        ref={birthdateInput}\r\n                        defaultValue={data.birthdateVal}></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Рост:</Form.Label>\r\n                    <Form.Control className=\"no-placeholder\" type=\"text\"\r\n                        name=\"height\"\r\n                        ref={heightInput}\r\n                        defaultValue={data.heightVal}></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>№ амбулаторной карты:</Form.Label>\r\n                    <Form.Control type=\"text\"\r\n                        name=\"ambnum\"\r\n                        ref={ambnumInput}\r\n                        defaultValue={data.ambnumVal}></Form.Control>\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={handleUpdate}>Сохранить</Button>\r\n                <Button variant=\"secondary\" onClick={handleClose}>Отмена</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default UpdatePatientModal;\r\n","import React from 'react';\r\nimport './TabPatients.css';\r\nimport Menu from './Menu';\r\nimport Search from './Search';\r\nimport TableInfo from './TableInfo';\r\nimport Paginator from './Paginator';\r\nimport TableField from './TableField';\r\nimport InsertPatientModal from './InsertPatientModal';\r\nimport InsertCardModal from './InsertCardModal';\r\nimport UpdatePatientModal from './UpdatePatientModal';\r\n\r\n\r\nfunction TabPatients(props) {\r\n\r\n    const {\r\n        panelData,\r\n        insertPatientModalData,\r\n        updatePatientModalData,\r\n        insertCardModalData,\r\n        paginatorData,\r\n        patientsData,\r\n        patientsSearchFieldsData\r\n    } = props;\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Menu data={panelData} />\r\n            <hr />\r\n            <Search data={patientsSearchFieldsData} />\r\n            <hr />\r\n            <TableInfo countRows={patientsData.countrows} />\r\n            <hr />\r\n            <Paginator curPage={paginatorData}\r\n                perPage={patientsData.perpage}\r\n                countRows={patientsData.countrows} />\r\n            <TableField rowItems={patientsData.rowitems} />\r\n            <hr />\r\n            <Paginator curPage={paginatorData}\r\n                perPage={patientsData.perpage}\r\n                countRows={patientsData.countrows} />\r\n            <br />\r\n            <br />\r\n            <InsertPatientModal data={insertPatientModalData} />\r\n            <InsertCardModal data={insertCardModalData} userData={panelData} />\r\n            <UpdatePatientModal data={updatePatientModalData} />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default TabPatients;","import React from 'react';\r\nimport './Menu.css';\r\nimport { Row, Col, InputGroup, FormControl } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUserMd } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction Menu(props) {\r\n\r\n    const { data } = props;\r\n\r\n    return (\r\n        <Row>\r\n            <Col lg={12}>\r\n                <Row>\r\n                    <Col lg={4}>\r\n                        <InputGroup className=\"sav2-mb-1\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>\r\n                                    <FontAwesomeIcon icon={faUserMd} size=\"1x\" />\r\n                                    &nbsp;Сотрудник:\r\n                                </InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl disabled value={data.userFIO} />\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Menu;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport './SearchItem.css';\r\nimport { Col, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport Inputmask from 'inputmask';\r\n\r\n\r\nfunction SearchItem({isRed = false, ...props}) {\r\n\r\n    const inputField = useRef(null);\r\n\r\n    const {\r\n        size,\r\n        label,\r\n        mask,\r\n        handleSearch,\r\n        name,\r\n        currentVal\r\n    } = props;\r\n\r\n    //Date-Picker -- start --\r\n    //EventListener settings\r\n    useEffect(() => {\r\n        if (mask && mask.type === 'datepicker') {\r\n            const inputElement = inputField.current;\r\n\r\n            window.jQuery(inputElement).on('change', handleChange);\r\n\r\n            return () => {\r\n                window.jQuery(inputElement).off('change', handleChange);\r\n            };\r\n        }//eslint-disable-next-line\r\n    }, []);\r\n    //Datepicker settings\r\n    useEffect(() => {\r\n        if (mask && mask.type === 'datepicker') {\r\n            const inputElement = inputField.current;\r\n\r\n            window.jQuery(inputElement).datepicker(mask.params);\r\n\r\n            return () => {\r\n                window.jQuery(inputElement).datepicker('destroy');\r\n            };\r\n        }//eslint-disable-next-line\r\n    }, []);\r\n    //Date-Picker -- end --\r\n\r\n    //Input-Mask -- start --\r\n    useEffect(() => {\r\n        if (mask && mask.type === 'inputmask') {\r\n            const inputElement = inputField.current;\r\n\r\n            Inputmask(mask.params).mask(inputElement);\r\n\r\n            return () => {\r\n                Inputmask.remove(inputElement);\r\n            };\r\n        }//eslint-disable-next-line\r\n    }, []);\r\n    //Input-Mask -- end --\r\n\r\n    //EventListener for default (without mask property) search-item\r\n    /* useEffect(() => {\r\n        if (!mask) {\r\n            const inputElement = inputField.current;\r\n            inputElement.addEventListener('change', handleChange);\r\n\r\n            return () => {\r\n                inputElement.removeEventListener('change', handleChange);\r\n            };\r\n        }\r\n    }, []); */\r\n\r\n    const searchLatency = 1000;\r\n    let delayTimer = null;\r\n\r\n    const handleChange = () => {\r\n        clearTimeout(delayTimer);\r\n\r\n        delayTimer = setTimeout(function() {\r\n            handleSearch({[name]: inputField.current.value.trim()});\r\n        }, searchLatency);\r\n    };\r\n\r\n    const handleClick = async () => {\r\n        const inputElement = inputField.current;\r\n\r\n        if (inputElement.value !== '') {\r\n            inputElement.value = '';\r\n            //const ev = new Event('change', { bubbles: true });\r\n            //inputElement.dispatchEvent(ev);\r\n            handleSearch({ \r\n                [name]: inputElement.value,\r\n                patientIDIsRed: false,\r\n            });\r\n        }\r\n    };\r\n\r\n    const style = {\r\n        backgroundColor: 'rgba(255, 0, 0, 0.25)'\r\n    };\r\n\r\n    return (\r\n        <Col lg={size} className=\"sav2-mt-1\">\r\n            <InputGroup>\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text>{label}</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl style={isRed ? style : {}} \r\n                    className=\"no-placeholder\" \r\n                    ref={inputField} \r\n                    onChange={handleChange}\r\n                    defaultValue={currentVal} />\r\n                <InputGroup.Append>\r\n                    <Button variant=\"secondary\" onClick={handleClick}>\r\n                        <FontAwesomeIcon icon={faTimes} size=\"1x\" />\r\n                    </Button>\r\n                </InputGroup.Append>\r\n            </InputGroup>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default SearchItem;\r\n","import React, { useContext } from 'react';\r\nimport './Search.css';\r\nimport { Row } from 'react-bootstrap';\r\nimport SearchItem from './SearchItem';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\n\r\n\r\nfunction Search(props) {\r\n\r\n    const { data } = props;\r\n\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const doSearch = (searchParams) => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setCardIndexSearchFields',\r\n            cardIndexSearchFields: searchParams\r\n        });\r\n    };\r\n\r\n    const inputmaskData = {\r\n        type: \"inputmask\",\r\n        params: { mask: \"9{0,}\", greedy: false }\r\n    };\r\n\r\n    const datepickerData = {\r\n        type: \"datepicker\",\r\n        params: {\r\n            format: \"dd-mm-yyyy\",\r\n            viewMode: \"months\",\r\n            minViewMode: \"days\",\r\n            language: 'ru'\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <p>Поиск карт: </p>\r\n            <Row>\r\n                <SearchItem name=\"cardID\"\r\n                    size={3}\r\n                    label=\"id карты:\"\r\n                    handleSearch={doSearch}\r\n                    mask={inputmaskData}\r\n                    currentVal={data.cardID} />\r\n                <SearchItem name=\"patientID\"\r\n                    size={3}\r\n                    label=\"id пациента:\"\r\n                    handleSearch={doSearch}\r\n                    mask={inputmaskData}\r\n                    currentVal={data.patientID}\r\n                    isRed={data.patientIDIsRed} />\r\n                <SearchItem name=\"patientAmbnum\"\r\n                    size={6}\r\n                    label=\"№ амб. карты пациента:\"\r\n                    handleSearch={doSearch}\r\n                    currentVal={data.patientAmbnum} />\r\n                <SearchItem name=\"cardDate\"\r\n                    size={6}\r\n                    label=\"Дата процедуры:\"\r\n                    handleSearch={doSearch}\r\n                    mask={datepickerData}\r\n                    currentVal={data.cardDate} />\r\n                <SearchItem name=\"patientFio\"\r\n                    size={6}\r\n                    label=\"ФИО пациента:\"\r\n                    handleSearch={doSearch}\r\n                    currentVal={data.patientFio} />\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport './TableInfo.css';\r\nimport { InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nfunction TableInfo(props) {\r\n\r\n    const { countRows } = props;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <p>Список записей:</p>\r\n            <InputGroup>\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text>Всего найдено записей:</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl disabled value={countRows} style={{maxWidth: '200px'}} />\r\n            </InputGroup>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default TableInfo;\r\n","import React, { useContext } from 'react';\r\nimport './Paginator.css';\r\nimport { Pagination } from 'react-bootstrap';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\n\r\nfunction Paginator(props) {\r\n\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n    \r\n    const { curPage, perPage, countRows } = props;\r\n\r\n    const amoutOfItems = 7;\r\n\r\n    const offset = Math.floor(7 / 2);\r\n\r\n    const numberOfPages = (Math.ceil(countRows / perPage) < 1) ? 1 : Math.ceil(countRows / perPage);\r\n    \r\n    const itemClick = (e) => {\r\n        const pageValue = e.target.attributes.pagenum.value\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabCardIndexPage: parseInt(pageValue) }\r\n        });\r\n    };\r\n\r\n    const prevClick = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabCardIndexPage: (curPage - 1 < 1) ? 1 : curPage - 1 }\r\n        });\r\n    };\r\n\r\n    const nextClick = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabCardIndexPage: ((curPage + 1) > numberOfPages) ? numberOfPages : curPage + 1 }\r\n        });\r\n    };\r\n    \r\n    const firstClick = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabCardIndexPage: 1 }\r\n        });\r\n    };\r\n\r\n    const lastClick = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabCardIndexPage: numberOfPages }\r\n        });\r\n    };\r\n\r\n    let items = [];\r\n\r\n    const getStartItem = () => {\r\n        if (curPage - offset <= 1) {\r\n            return 1;\r\n        } else {\r\n            if (curPage + amoutOfItems - offset > numberOfPages) {\r\n            /**\r\n             * let \r\n             *  curPage = x,\r\n             *  offset = y,\r\n             *  numberOfPages = z\r\n             * \r\n             * previous items:                   constant previous items at the end:\r\n             * 5 6 7 (8) 9 10 11  ==> 8-3        5 6 7 (8) 9 10 11  ==> 8-3 = 8-3-(3-(11-8))\r\n             * 6 7 8 (9) 10 11    ==> 9-3   >>>  5 6 7 8 (9) 10 11  ==> 9-4 = 9-3-(3-(11-9))\r\n             * 7 8 9 (10) 11      ==> 10-3  >>>  5 6 7 8 9 (10) 11  ==> 10-5 = 10-3-(3-(11-10))\r\n             * 8 9 10 (11)        ==> 11-3       5 6 7 8 9 10 (11)  ==> 11-6 = 11-3-(3-(11-11))\r\n             * \r\n             * the first expression was:\r\n             * x - y - (y - (z - x))\r\n             * \r\n             * modified expression:\r\n             * x - y - y + (z - x)\r\n             * x - 2y + z - x\r\n             * -2y + z\r\n             * z - 2y\r\n             * \r\n             * i.e. numberOfPages - (2 * offset)\r\n             */\r\n                return numberOfPages - (2 * offset);\r\n            } else { \r\n                return curPage - offset;\r\n            }\r\n        }\r\n    };\r\n\r\n    const getEndItem = () => {\r\n        if (curPage - offset <= 1) {\r\n            if (numberOfPages < amoutOfItems) {\r\n                return numberOfPages + 1;\r\n            } else {\r\n                return amoutOfItems + 1;\r\n            }\r\n        } else {\r\n            if (curPage + amoutOfItems - offset > numberOfPages) {\r\n                return numberOfPages + 1;\r\n            } else {\r\n                return curPage + amoutOfItems - offset;\r\n            }\r\n        }\r\n    };\r\n\r\n    const startItem = getStartItem();\r\n    const endItem = getEndItem();\r\n\r\n    for (let i = startItem; i < endItem; i++) {\r\n        items.push(\r\n            <Pagination.Item active={i === curPage}\r\n                key={i}\r\n                onClick={itemClick}\r\n                pagenum={i}>\r\n                {i}\r\n            </Pagination.Item>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Pagination>\r\n            <Pagination.First onClick={firstClick} disabled={curPage === 1} />\r\n            <Pagination.Prev onClick={prevClick} disabled={curPage === 1} />\r\n            {items}\r\n            <Pagination.Next onClick={nextClick} disabled={curPage === numberOfPages} />\r\n            <Pagination.Last onClick={lastClick} disabled={curPage === numberOfPages} />\r\n        </Pagination>\r\n    );\r\n}\r\n\r\nexport default Paginator;\r\n","import React, { useContext } from 'react';\r\nimport './TableRow.css';\r\nimport { OverlayTrigger, Tooltip, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFileWord } from '@fortawesome/free-solid-svg-icons';\r\nimport { faTrashAlt, faClipboard } from '@fortawesome/free-regular-svg-icons';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport processException from 'App/Utils/processException';\r\n\r\n\r\nfunction TableRow(props) {\r\n\r\n    const appDispatch = useContext(AppDispatch);\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const {\r\n        printCard,\r\n        cardID,\r\n        cardDate,\r\n        patientID,\r\n        patientFio,\r\n        patientAmbnum\r\n    } = props;\r\n\r\n    const loadingTriggers = [\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];\r\n\r\n    const handleDelete = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setDeleteCardModal',\r\n            deleteCardModalData: { \r\n                show: true,\r\n                cardIDVal: cardID\r\n            }\r\n        });\r\n    };\r\n\r\n    const handlePrint = async () => {\r\n        await mainDoctorPanelDispatch({\r\n            type: 'setPrintForm',\r\n            printFormData: {\r\n                cardID: cardID, \r\n                printType: 3\r\n            }\r\n        });\r\n\r\n        printCard();\r\n    };\r\n\r\n    const handlePrintI = async () => {\r\n        await mainDoctorPanelDispatch({\r\n            type: 'setPrintForm',\r\n            printFormData: {\r\n                cardID: cardID, \r\n                printType: 1\r\n            }\r\n        });\r\n\r\n        printCard();\r\n    };\r\n\r\n    const handlePrintII = async () => {\r\n        await mainDoctorPanelDispatch({\r\n            type: 'setPrintForm',\r\n            printFormData: {\r\n                cardID: cardID, \r\n                printType: 2\r\n            }\r\n        });\r\n\r\n        printCard();\r\n    };\r\n\r\n    const handleChoose = async () => {\r\n\r\n        const textResponse = await fetchData(\r\n            'select_dcard_by_id',\r\n            { id: cardID },\r\n            ...loadingTriggers\r\n        );\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: 'TabCardIndex.TableField.TableRow.handleChoose()',\r\n            representError: (errorInfo) => {\r\n                mainDoctorPanelDispatch({\r\n                    type: 'setInfoBox',\r\n                    infoBoxData: { variant: 'danger', text: errorInfo, show: true }\r\n                });\r\n            }\r\n        };\r\n\r\n        if (!processException(response)) {\r\n            const jsonResponse = JSON.parse(textResponse);\r\n            \r\n            await mainDoctorPanelDispatch({\r\n                type: 'setChosenCardData',\r\n                chosenCardData: {\r\n                    ...jsonResponse,\r\n                    cardID: cardID\r\n                }\r\n            });\r\n\r\n            mainDoctorPanelDispatch({\r\n                type: 'setPanelTabs',\r\n                panelTabs: {\r\n                    showPatientsTab: false,\r\n                    showCardIndexTab: false,\r\n                    showChosenCardTab: true,\r\n                    showUsersTab: false,\r\n                    showCardValidationTab: false\r\n                }\r\n            });\r\n        } \r\n    };\r\n\r\n    return (\r\n        <tr>\r\n            <td>{cardID}</td>\r\n            <td>{cardDate}</td>\r\n            <td>\r\n                <OverlayTrigger\r\n                    placement=\"left\"\r\n                    overlay={<Tooltip id={patientID}>id: {patientID}</Tooltip>}>\r\n                    <span>{patientFio}</span>\r\n                </OverlayTrigger>\r\n            </td>\r\n            <td>{patientAmbnum}</td>\r\n            <td>\r\n                <Button variant=\"danger\" className=\"sav2-opt-button\" onClick={handleDelete} title=\"Удалить\">\r\n                    <FontAwesomeIcon icon={faTrashAlt} size=\"1x\" />\r\n                </Button>\r\n                <Button variant=\"primary\" className=\"sav2-opt-button\" onClick={handlePrintI} title=\"Печать первой части\">\r\n                    <FontAwesomeIcon icon={faFileWord} size=\"1x\" /> I\r\n                </Button>\r\n                <Button variant=\"primary\" className=\"sav2-opt-button\" onClick={handlePrintII} title=\"Печать второй части\">\r\n                    <FontAwesomeIcon icon={faFileWord} size=\"1x\" /> II\r\n                </Button>\r\n                <Button variant=\"primary\" className=\"sav2-opt-button\" onClick={handlePrint} title=\"Печать всей карты\">\r\n                    <FontAwesomeIcon icon={faFileWord} size=\"1x\" />\r\n                </Button>\r\n                <Button variant=\"success\" className=\"sav2-opt-button\" onClick={handleChoose} title=\"Работа с картой\">\r\n                    <FontAwesomeIcon icon={faClipboard} size=\"1x\" />\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default TableRow;\r\n","import React from 'react';\r\nimport './TableField.css';\r\nimport { Table } from 'react-bootstrap';\r\nimport TableRow from './TableRow';\r\n\r\n\r\nfunction TableField(props) {\r\n\r\n    const { rowItems, printCard } = props;\r\n\r\n    const tableRows = rowItems.map((item) => (\r\n        <TableRow key={(item[0]).toString()} printCard={printCard}\r\n            cardID={(item[0]).toString()}\r\n            cardDate={item[1]}\r\n            patientID={(item[2]).toString()}\r\n            patientFio={item[3]}\r\n            patientAmbnum={item[4]} />\r\n    ));\r\n\r\n    return (\r\n        <Table striped>\r\n            <thead>\r\n                <tr>\r\n                    <th>id</th>\r\n                    <th>Дата процедуры</th>\r\n                    <th>Пациент</th>\r\n                    <th>№ амб. карты</th>\r\n                    <th>Действие</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {tableRows}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default TableField;\r\n","import React, { useContext } from 'react';\r\nimport './DeleteCardModal.css';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport processException from 'App/Utils/processException';\r\nimport makeFixedFormat from 'App/Utils/makeFixedFormat';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\n\r\n\r\nfunction DeleteCardModal(props) {\r\n\r\n    const appDispatch = useContext(AppDispatch);\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const { data, userData, chosenCardID } = props;\r\n\r\n    const loadingTriggers = [\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];\r\n\r\n    const handleClose = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setDeleteCardModal',\r\n            deleteCardModalData: { show: false }\r\n        });\r\n    };\r\n\r\n    const handleDelete = async () => {\r\n        const currentdate = new Date();\r\n        const datetime = \"deletion timestamp: \"\r\n            + makeFixedFormat(currentdate.getDate()) + \"-\"\r\n            + makeFixedFormat((currentdate.getMonth() + 1)) + \"-\"\r\n            + currentdate.getFullYear() + \" @ \"\r\n            + makeFixedFormat(currentdate.getHours()) + \":\"\r\n            + makeFixedFormat(currentdate.getMinutes()) + \":\"\r\n            + makeFixedFormat(currentdate.getSeconds());\r\n\r\n        const changelogVal = '|' + datetime + ' by ' + userData.userFIO + ' (id:' + userData.userID + ')';\r\n\r\n        const textResponse = await fetchData(\r\n            'delete_dcard',\r\n            { id: data.cardIDVal, changelog: changelogVal },\r\n            ...loadingTriggers\r\n        );\r\n\r\n        mainDoctorPanelDispatch({\r\n            type: 'setDeleteCardModal',\r\n            deleteCardModalData: { show: false }\r\n        });\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: 'TabCardIndex.TableRow.handleDelete()',\r\n            representError: (errorInfo) => {\r\n                mainDoctorPanelDispatch({\r\n                    type: 'setInfoBox',\r\n                    infoBoxData: { variant: 'danger', text: errorInfo, show: true }\r\n                });\r\n            }\r\n        };\r\n\r\n        if (!processException(response)) {\r\n            //clear current chosen Card (if it was deleted)\r\n            if (data.cardIDVal === chosenCardID) {\r\n                await mainDoctorPanelDispatch({\r\n                    type: 'setChosenCardData',\r\n                    chosenCardData: {\r\n                        cardID: '',\r\n                        fields: {}\r\n                    }\r\n                });\r\n            }\r\n\r\n            mainDoctorPanelDispatch({\r\n                type: 'setInfoBox',\r\n                infoBoxData: { variant: 'success', text: textResponse, show: true }\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal show={data.show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Удаление диализной карты</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <p>Удалить данную карту под номером id: {data.cardIDVal}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={handleDelete}>Удалить</Button>\r\n                <Button variant=\"secondary\" onClick={handleClose}>Отмена</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default DeleteCardModal;\r\n","import React from 'react';\r\nimport './TabCardIndex.css';\r\nimport Menu from './Menu';\r\nimport Search from './Search';\r\nimport TableInfo from './TableInfo';\r\nimport Paginator from './Paginator';\r\nimport TableField from './TableField';\r\nimport DeleteCardModal from './DeleteCardModal';\r\n\r\n\r\nfunction TabCardIndex(props) {\r\n\r\n    const {\r\n        panelData,\r\n        paginatorData,\r\n        printCardHandler,\r\n        cardIndexData,\r\n        cardIndexSearchFieldsData,\r\n        deleteCardModalData,\r\n        chosenCardID\r\n    } = props;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Menu data={panelData} />\r\n            <hr />\r\n            <Search data={cardIndexSearchFieldsData} />\r\n            <hr />\r\n            <TableInfo countRows={cardIndexData.countrows} />\r\n            <hr />\r\n            <Paginator curPage={paginatorData}\r\n                perPage={cardIndexData.perpage}\r\n                countRows={cardIndexData.countrows} />\r\n            <TableField rowItems={cardIndexData.rowitems} printCard={printCardHandler} />\r\n            <hr />\r\n            <Paginator curPage={paginatorData}\r\n                perPage={cardIndexData.perpage}\r\n                countRows={cardIndexData.countrows} />\r\n            <br />\r\n            <br />\r\n            <DeleteCardModal data={deleteCardModalData} \r\n                userData={panelData} \r\n                chosenCardID={chosenCardID} />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default TabCardIndex;\r\n","import React, { useContext } from 'react';\r\nimport './Menu.css';\r\nimport { Row, Col, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUserMd, faFileWord } from '@fortawesome/free-solid-svg-icons';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\n\r\nfunction Menu(props) {\r\n\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const { \r\n        data,\r\n        cardID,\r\n        printCard\r\n    } = props;\r\n\r\n    const handlePrint = async () => {\r\n        await mainDoctorPanelDispatch({\r\n            type: 'setPrintForm',\r\n            printFormData: {\r\n                cardID: cardID, \r\n                printType: 3\r\n            }\r\n        });\r\n\r\n        printCard();\r\n    };\r\n\r\n    const handlePrintI = async () => {\r\n        await mainDoctorPanelDispatch({\r\n            type: 'setPrintForm',\r\n            printFormData: {\r\n                cardID: cardID, \r\n                printType: 1\r\n            }\r\n        });\r\n\r\n        printCard();\r\n    };\r\n\r\n    const handlePrintII = async () => {\r\n        await mainDoctorPanelDispatch({\r\n            type: 'setPrintForm',\r\n            printFormData: {\r\n                cardID: cardID, \r\n                printType: 2\r\n            }\r\n        });\r\n\r\n        printCard();\r\n    };\r\n\r\n    const buttonActive = (\r\n        cardID !== '' && \r\n        cardID !== null &&\r\n        cardID !== 0\r\n    );\r\n\r\n    return (\r\n        <Row>\r\n            <Col lg={12}>\r\n                <Row>\r\n                    <Col lg={4}>\r\n                        <InputGroup className=\"sav2-mb-1\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>\r\n                                    <FontAwesomeIcon icon={faUserMd} size=\"1x\" />\r\n                                    &nbsp;Сотрудник:\r\n                                </InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl disabled value={data.userFIO} />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col lg={4}>\r\n                        <Button disabled={!buttonActive} \r\n                            variant=\"primary\" \r\n                            onClick={handlePrintI} title=\"Печать первой части\">\r\n                                <FontAwesomeIcon icon={faFileWord} size=\"1x\" /> I\r\n                        </Button>\r\n                        &nbsp;&nbsp;\r\n                        <Button disabled={!buttonActive}\r\n                            variant=\"primary\" \r\n                            onClick={handlePrintII} title=\"Печать второй части\">\r\n                                <FontAwesomeIcon icon={faFileWord} size=\"1x\" /> II\r\n                        </Button>\r\n                        &nbsp;&nbsp;\r\n                        <Button disabled={!buttonActive}\r\n                            variant=\"primary\" \r\n                            onClick={handlePrint} title=\"Печать всей карты\">\r\n                                <FontAwesomeIcon icon={faFileWord} size=\"1x\" /> I+II\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Menu;\r\n","import React from 'react';\r\nimport './CardSection.css';\r\nimport { Form, Row, Col } from 'react-bootstrap';\r\n\r\n\r\nfunction CardSection(props) {\r\n\r\n    const {titleItems, contentItems} = props;\r\n\r\n    const items = contentItems.map((item, index) => {\r\n        \r\n        if (titleItems[index] === null) {\r\n            return (\r\n                <Form.Group as={Row} key={index.toString()}>\r\n                    <Col>\r\n                        {item}\r\n                    </Col>\r\n                </Form.Group>\r\n            );\r\n        } else {\r\n            return (\r\n                <Form.Group as={Row} key={index.toString()}>\r\n                    <Form.Label className=\"sav2-lb-sm\" column sm=\"auto\" md=\"auto\" lg=\"auto\">\r\n                        {titleItems[index]}\r\n                    </Form.Label>\r\n                    <Col>\r\n                        {item}\r\n                    </Col>\r\n                </Form.Group>\r\n            );\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"p-3 border sav2-border-light rounded sav2-dcard-section\">\r\n            {items}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardSection;\r\n","import React from 'react';\r\nimport './AddonInputField.css';\r\nimport { InputGroup } from 'react-bootstrap';\r\n\r\n\r\nfunction AddonInputField(props) {\r\n\r\n    const { addonText, controlElement } = props;\r\n\r\n    return (\r\n        <InputGroup size=\"sm\">\r\n            <InputGroup.Prepend>\r\n                <InputGroup.Text>\r\n                    {addonText}\r\n                </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            {controlElement}\r\n        </InputGroup>\r\n    );\r\n}\r\n\r\nexport default AddonInputField;\r\n","import React from 'react';\r\nimport './AddonInputAddonField.css';\r\nimport { InputGroup } from 'react-bootstrap';\r\n\r\n\r\nfunction AddonInputAddonField(props) {\r\n\r\n    const { preAddonText, controlElement, postAddonText } = props;\r\n\r\n    return (\r\n        <InputGroup size=\"sm\">\r\n            <InputGroup.Prepend>\r\n                <InputGroup.Text>\r\n                    {preAddonText}\r\n                </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            {controlElement}\r\n            <InputGroup.Append>\r\n                <InputGroup.Text>\r\n                    {postAddonText}\r\n                </InputGroup.Text>\r\n            </InputGroup.Append>\r\n        </InputGroup>\r\n    );\r\n}\r\n\r\nexport default AddonInputAddonField;\r\n","const cardFields = [\r\n    'd0',\r\n    'd1',\r\n    'd2',\r\n    'd3',\r\n    'd4',\r\n    'd5',\r\n    'd6',\r\n    'd7',\r\n    'd8',\r\n    'd9',\r\n    'd10',\r\n    'd11',\r\n    'd12',\r\n    'd13',\r\n    'd14',\r\n    'd15',\r\n    'd16',\r\n    'd17',\r\n    'd18',\r\n    'd19',\r\n    'd20',\r\n    'd21a',\r\n    'd21b',\r\n    'd22',\r\n    'd23',\r\n    'd24',\r\n    'd25',\r\n    'd26',\r\n    'd27',\r\n    'd28',\r\n    'd29',\r\n    'd30',\r\n    'd31',\r\n    'd32',\r\n    'd33',\r\n    'd34',\r\n    'd35',\r\n    'd36',\r\n    'd37',\r\n    'd38',\r\n    'd39',\r\n    'd40',\r\n    'd41',\r\n    'd42',\r\n    'd43',\r\n    'd44',\r\n    'd45',\r\n    'd46',\r\n    'd47a',\r\n    'd47b',\r\n    'd48',\r\n    'd49',\r\n    'd50',\r\n    'd51',\r\n    'd52',\r\n    'd53',\r\n    'd54',\r\n    'd55',\r\n    'd56',\r\n    'd57',\r\n    'd58',\r\n    'd59',\r\n    'd60',\r\n    'd61',\r\n    'd62',\r\n    'd63',\r\n    'd64',\r\n    'dcardid',\r\n    'dpatientid',\r\n    'dwdynamic',\r\n    'dwdynamicdetails'\r\n];\r\n\r\nexport default cardFields;","import React, { useRef, useEffect, useContext } from 'react';\r\nimport './ChosenCardForm.css';\r\nimport CardSection from './CardSection';\r\nimport AddonInputField from './AddonInputField';\r\nimport AddonInputAddonField from './AddonInputAddonField';\r\nimport { \r\n    Form,\r\n    Row, \r\n    Col, \r\n    Tabs, \r\n    Tab, \r\n    OverlayTrigger, \r\n    Tooltip,\r\n    InputGroup,\r\n    Button \r\n} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    faClipboardCheck, \r\n    faUserCheck, \r\n    faDoorOpen, \r\n    faWeight, \r\n    faBalanceScale, \r\n    faRulerVertical,\r\n    faHourglassStart,\r\n    faSyringe,\r\n    faStethoscope,\r\n    faHeartbeat,\r\n    faThermometerHalf \r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { \r\n    faCalendarAlt, \r\n    faIdBadge, \r\n    faClock,\r\n    faCircle \r\n} from '@fortawesome/free-regular-svg-icons';\r\nimport cardFields from 'App/Utils/cardFields';\r\nimport Inputmask from 'inputmask';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\n\r\n\r\nfunction ChosenCardForm(props) {\r\n\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const { data } = props;\r\n\r\n    const controls = useRef(Object.assign( \r\n        ...cardFields.map( (item) => {\r\n            if (item !== 'd1' && \r\n                item !== 'd3' &&\r\n                item !== 'd4' &&\r\n                item !== 'd46' &&\r\n                item !== 'd64' &&\r\n                item !== 'dcardid' &&\r\n                item !== 'dpatientid' &&\r\n                item !== 'dwdynamic' &&\r\n                item !== 'dwdynamicdetails'\r\n            ) { \r\n                return {[item]: React.createRef()};\r\n            } else {\r\n                return {};\r\n            }\r\n        } ) \r\n    ));\r\n\r\n    const dcardFields = controls.current;\r\n    const cardIDisValid = (data.cardID !== '' && data.cardID !== null && data.cardID !== 0);\r\n\r\n    //mount datepiker\r\n    useEffect(() => {\r\n        if (cardIDisValid) {\r\n            const d6 = dcardFields.d6.current;\r\n\r\n            window.jQuery(d6).datepicker(\r\n                {\r\n                    format: \"dd-mm-yyyy\",\r\n                    viewMode: \"months\",\r\n                    minViewMode: \"days\",\r\n                    language: 'ru'\r\n                }\r\n            );\r\n\r\n            return () => {\r\n                window.jQuery(d6).datepicker('destroy');\r\n            };\r\n        }\r\n    },[dcardFields, cardIDisValid]);\r\n\r\n    //mount inputmask\r\n    //1\r\n    useEffect(() => {\r\n        if (cardIDisValid) {\r\n            const maskSettings = {\r\n                mask: \"9{0,}\",\r\n                greedy: false\r\n            };\r\n\r\n            [\r\n                'd9',\r\n                'd12',\r\n                'd15',\r\n                'd16',\r\n                'd17',\r\n                'd18',\r\n                'd19',\r\n                'd21a',\r\n                'd21b',\r\n                'd22',\r\n                'd36',\r\n                'd37',\r\n                'd38',\r\n                'd39',\r\n                'd41',\r\n                'd42',\r\n                'd43',\r\n                'd47a',\r\n                'd47b',\r\n                'd48'\r\n            ].forEach((item) => {\r\n                Inputmask(maskSettings).mask(dcardFields[item].current);\r\n            });\r\n\r\n            return () => {\r\n                [\r\n                    'd9',\r\n                    'd12',\r\n                    'd15',\r\n                    'd16',\r\n                    'd17',\r\n                    'd18',\r\n                    'd19',\r\n                    'd21a',\r\n                    'd21b',\r\n                    'd22',\r\n                    'd36',\r\n                    'd37',\r\n                    'd38',\r\n                    'd39',\r\n                    'd41',\r\n                    'd42',\r\n                    'd43',\r\n                    'd47a',\r\n                    'd47b',\r\n                    'd48'\r\n                ].forEach((item) => {\r\n                    Inputmask.remove(dcardFields[item].current);\r\n                });\r\n            };\r\n        }\r\n    }, [dcardFields, cardIDisValid]);\r\n    //2\r\n    useEffect(() => {\r\n        if (cardIDisValid) {\r\n            [\r\n                'd2',\r\n                'd20',\r\n                'd45'\r\n            ].forEach((item) => {\r\n                Inputmask({\r\n                    mask: \"9{0,3}[.9{0,2}]\",\r\n                    greedy: false,\r\n                    oncomplete: () => {\r\n                        if (dcardFields[item].current.value.trim() === '.') {\r\n                            dcardFields[item].current.value = '0.';\r\n                        }\r\n                    },\r\n                    onincomplete: () => {\r\n                        if (dcardFields[item].current.value.trim() === '.') {\r\n                            dcardFields[item].current.value = '0.';\r\n                        }\r\n                    }\r\n                }).mask(dcardFields[item].current);\r\n            });\r\n\r\n            return () => {\r\n                [\r\n                    'd2',\r\n                    'd20',\r\n                    'd45'\r\n                ].forEach((item) => {\r\n                    Inputmask.remove(dcardFields[item].current);\r\n                });\r\n            };\r\n        }\r\n    }, [dcardFields, cardIDisValid]);\r\n    //3\r\n    useEffect(() => {\r\n        if (cardIDisValid) {\r\n            const d54 = dcardFields.d54.current;\r\n\r\n            const maskSettings = {\r\n                mask: \"9{0,2}[.9{0,1}]\",\r\n                greedy: false,\r\n                oncomplete: () => {\r\n                    if (d54.value.trim() === '.') {\r\n                        d54.value = '0.';\r\n                    }\r\n                },\r\n                onincomplete: () => {\r\n                    if (d54.value.trim() === '.') {\r\n                        d54.value = '0.';\r\n                    }\r\n                }\r\n            };\r\n\r\n            Inputmask(maskSettings).mask(d54);\r\n\r\n            return () => {\r\n                Inputmask.remove(d54);\r\n            };\r\n        }\r\n    }, [dcardFields, cardIDisValid]);\r\n    //4\r\n    useEffect(() => {\r\n        if (cardIDisValid) {\r\n            [\r\n                'd10',\r\n                'd13',\r\n                'd14',\r\n                'd49',\r\n                'd50',\r\n                'd51',\r\n                'd52',\r\n                'd53',\r\n                'd55',\r\n                'd56',\r\n                'd57'\r\n            ].forEach((item) => {\r\n                Inputmask({\r\n                    mask: \"9{0,5}[.9{0,2}]\",\r\n                    greedy: false,\r\n                    oncomplete: () => {\r\n                        if (dcardFields[item].current.value.trim() === '.') {\r\n                            dcardFields[item].current.value = '0.';\r\n                        }\r\n                    },\r\n                    onincomplete: () => {\r\n                        if (dcardFields[item].current.value.trim() === '.') {\r\n                            dcardFields[item].current.value = '0.';\r\n                        }\r\n                    }\r\n                }).mask(dcardFields[item].current);\r\n            });\r\n\r\n            return () => {\r\n                [\r\n                    'd10',\r\n                    'd13',\r\n                    'd14',\r\n                    'd49',\r\n                    'd50',\r\n                    'd51',\r\n                    'd52',\r\n                    'd53',\r\n                    'd55',\r\n                    'd56',\r\n                    'd57'\r\n                ].forEach((item) => {\r\n                    Inputmask.remove(dcardFields[item].current);\r\n                });\r\n            };\r\n        }\r\n    }, [dcardFields, cardIDisValid]);\r\n\r\n    const handleClick = () => {\r\n        //console.log(dcardFields.d23.current.checked);\r\n\r\n        const currentFields = Object.assign( \r\n            ...cardFields.map( (item) => {\r\n                //NOT Constant\r\n                if (item !== 'd1' && \r\n                    item !== 'd3' &&\r\n                    item !== 'd4' &&\r\n                    item !== 'd46' &&\r\n                    item !== 'd64' &&\r\n                    item !== 'dcardid' &&\r\n                    item !== 'dpatientid' &&\r\n                    item !== 'dwdynamic' &&\r\n                    item !== 'dwdynamicdetails'\r\n                ) { \r\n                    //NOT String type\r\n                    if (item !== 'd5' &&\r\n                        item !== 'd6' &&\r\n                        item !== 'd28' &&\r\n                        item !== 'd32' &&\r\n                        item !== 'd35' &&\r\n                        item !== 'd58' &&\r\n                        item !== 'd63'\r\n                    ) {\r\n                        //NOT boolean type\r\n                        if (item !== 'd23' &&\r\n                            item !== 'd24' &&\r\n                            item !== 'd26' &&\r\n                            item !== 'd27' &&\r\n                            item !== 'd44' &&\r\n                            item !== 'd59' &&\r\n                            item !== 'd61' &&\r\n                            item !== 'd62'\r\n                        ) {\r\n                            return { \r\n                                [item]: (dcardFields[item].current.value === '' ? \r\n                                        '' : Number(dcardFields[item].current.value)) \r\n                            };                         \r\n                        } else {\r\n                            return { [item]: (dcardFields[item].current.checked ? 1 : 0) };\r\n                        }                     \r\n                    } else {    \r\n                        return { [item]: dcardFields[item].current.value.replace(/\\\\/g, \"/\").replace(/\"/g, '\\\\\"').trim() };\r\n                    }\r\n                } else {\r\n                    return {[item]: data.fields[item]};\r\n                }\r\n            } ) \r\n        );\r\n\r\n        mainDoctorPanelDispatch({\r\n            type: 'setUpdateChosenCardModal',\r\n            updateChosenCardModalData: { \r\n                show: true,\r\n                currentFields: currentFields \r\n            }\r\n        }); \r\n    };\r\n\r\n    if (cardIDisValid) {\r\n        return (\r\n        <React.Fragment>\r\n            <h3>Карта процедуры:</h3>\r\n            <br />\r\n            <Row>\r\n                <Col lg={4}>\r\n                    <CardSection titleItems={[\"Дата:\"]} contentItems={[\r\n                        <AddonInputField \r\n                            addonText={<FontAwesomeIcon icon={faCalendarAlt} />} \r\n                            controlElement={\r\n                                <Form.Control as=\"input\" type=\"text\" \r\n                                    ref={dcardFields.d6} defaultValue={data.fields.d6} />\r\n                        } />\r\n                    ]} />\r\n                </Col>\r\n\r\n                <Col lg={4}>\r\n                    <CardSection titleItems={[\"Процедура:\"]} contentItems={[\r\n                        <Form.Control size=\"sm\" as=\"select\" \r\n                            ref={dcardFields.d0} defaultValue={data.fields.d0}>\r\n                            <option value=\"1\">ГД</option>\r\n                            <option value=\"2\">ГДФ</option>\r\n                        </Form.Control>\r\n                    ]} />\r\n                </Col>\r\n\r\n                <Col lg={4}>\r\n                    <CardSection titleItems={[\"id карты:\"]} contentItems={[\r\n                        <AddonInputField \r\n                            addonText={<FontAwesomeIcon icon={faClipboardCheck} />} \r\n                            controlElement={\r\n                                <Form.Control as=\"input\" type=\"text\" disabled \r\n                                    value={data.cardID} />\r\n                        } />\r\n                    ]} />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col lg={5}>\r\n                    <CardSection \r\n                        titleItems={[\"id пациента:\", \"Пациент:\", \"Зал:\"]} \r\n                        contentItems={[\r\n                            <AddonInputField \r\n                                addonText={<FontAwesomeIcon icon={faIdBadge} />} \r\n                                controlElement={\r\n                                    <Form.Control as=\"input\" type=\"text\" disabled \r\n                                        value={data.fields.dpatientid} />\r\n                            } />,\r\n                            <AddonInputField \r\n                                addonText={<FontAwesomeIcon icon={faUserCheck} />} \r\n                                controlElement={\r\n                                    <OverlayTrigger\r\n                                        placement=\"top\"\r\n                                        overlay={<Tooltip id=\"dcardPatientFIO\">{data.fields.d1}</Tooltip>}>\r\n                                        <Form.Control as=\"input\" type=\"text\" disabled \r\n                                            value={data.fields.d1} />\r\n                                    </OverlayTrigger>\r\n                            } />,\r\n                            <AddonInputField \r\n                                addonText={<FontAwesomeIcon icon={faDoorOpen} />} \r\n                                controlElement={\r\n                                    <Form.Control as=\"input\" type=\"text\" \r\n                                        ref={dcardFields.d5} defaultValue={data.fields.d5} />\r\n                            } />\r\n                    ]} />\r\n                </Col>\r\n\r\n                <Col lg={4}>\r\n                    <CardSection \r\n                        titleItems={[\"Сухой вес:\", \"Динамика СВ:\", \"Рост:\", \"Возраст:\"]} \r\n                        contentItems={[\r\n                            <AddonInputAddonField \r\n                                preAddonText={<FontAwesomeIcon icon={faWeight} />}\r\n                                postAddonText=\"кг\"\r\n                                controlElement={\r\n                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\" \r\n                                        ref={dcardFields.d2} defaultValue={data.fields.d2} />\r\n                            } />,\r\n                            <AddonInputAddonField \r\n                                preAddonText={<FontAwesomeIcon icon={faBalanceScale} />}\r\n                                postAddonText=\"кг\"\r\n                                controlElement={\r\n                                    <OverlayTrigger\r\n                                        placement=\"top\"\r\n                                        overlay={<Tooltip id=\"dwDynamicDetails\">{data.fields.dwdynamicdetails}</Tooltip>}>\r\n                                        <Form.Control as=\"input\" type=\"text\" disabled \r\n                                            value={data.fields.dwdynamic} />\r\n                                    </OverlayTrigger>\r\n                            } />,\r\n                            <AddonInputAddonField \r\n                                preAddonText={<FontAwesomeIcon icon={faRulerVertical} />}\r\n                                postAddonText=\"см\"\r\n                                controlElement={\r\n                                    <Form.Control as=\"input\" type=\"text\" disabled \r\n                                        value={data.fields.d3} />\r\n                            } />,\r\n                            <AddonInputField \r\n                                addonText={<FontAwesomeIcon icon={faClock} />} \r\n                                controlElement={\r\n                                    <Form.Control as=\"input\" type=\"text\" disabled \r\n                                        value={data.fields.d4} />\r\n                            } />\r\n                    ]} />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <Tabs defaultActiveKey=\"beforeGD\" id=\"GD-stages\">\r\n                        <Tab eventKey=\"beforeGD\" title=\"До ГД\">\r\n                            <hr />    \r\n                            <Row>\r\n                                <Col lg={4}>\r\n                                    <CardSection\r\n                                        titleItems={[\"Аппарат:\", \"Диализатор:\", \"Время ГД:\"]}\r\n                                        contentItems={[\r\n                                            <Form.Control size=\"sm\" as=\"select\"\r\n                                                ref={dcardFields.d7} defaultValue={data.fields.d7}>\r\n                                                <option value=\"1\">4008</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"2\">5008</option>\r\n                                            </Form.Control>,\r\n                                            <Form.Control size=\"sm\" as=\"select\"\r\n                                                ref={dcardFields.d8} defaultValue={data.fields.d8}>\r\n                                                <option value=\"1\">Fx 60</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"2\">Fx 80</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"3\">Fx 100</option>\r\n                                            </Form.Control>,\r\n                                            <AddonInputAddonField \r\n                                                preAddonText={<FontAwesomeIcon icon={faHourglassStart} />}\r\n                                                postAddonText=\"мин\"\r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d9} defaultValue={data.fields.d9} />\r\n                                            } />,\r\n                                    ]} />\r\n                                </Col>\r\n\r\n                                <Col lg={4}>\r\n                                    <CardSection\r\n                                        titleItems={[\"Подача:\", \"Диализат:\", \"Поток ди-та/ф.поток:\"]}\r\n                                        contentItems={[\r\n                                            <AddonInputAddonField \r\n                                                preAddonText={<FontAwesomeIcon icon={faSyringe} />}\r\n                                                postAddonText=\"мл/ч\"\r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d10} defaultValue={data.fields.d10} />\r\n                                            } />,\r\n                                            <Form.Control size=\"sm\" as=\"select\"\r\n                                                ref={dcardFields.d11} defaultValue={data.fields.d11}>\r\n                                                <option value=\"1\">ст</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"2\">гл</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"3\">са</option>\r\n                                            </Form.Control>,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faSyringe} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d12} defaultValue={data.fields.d12} />\r\n                                            } />\r\n                                    ]} />\r\n                                </Col>\r\n\r\n                                <Col lg={4}>\r\n                                    <CardSection\r\n                                        titleItems={[\"Доза гепарина:\", \"Болюс:\", \"Вр. гепарин./оконч:\"]}\r\n                                        contentItems={[\r\n                                            <AddonInputAddonField \r\n                                                preAddonText={<FontAwesomeIcon icon={faSyringe} />}\r\n                                                postAddonText=\"ЕД\"\r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d13} defaultValue={data.fields.d13} />\r\n                                            } />,\r\n                                            <AddonInputAddonField \r\n                                                preAddonText={<FontAwesomeIcon icon={faSyringe} />}\r\n                                                postAddonText=\"мл\"\r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d14} defaultValue={data.fields.d14} />\r\n                                            } />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faSyringe} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d15} defaultValue={data.fields.d15} />\r\n                                            } />\r\n                                    ]} />\r\n                                </Col>\r\n\r\n                                <Col lg={4}>\r\n                                    <CardSection\r\n                                        titleItems={[\"Бикарбонат:\", \"Na+:\", \"V-уф:\", \"Ск.К.:\"]}\r\n                                        contentItems={[\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faSyringe} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d16} defaultValue={data.fields.d16} />\r\n                                            } />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faSyringe} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d17} defaultValue={data.fields.d17} />\r\n                                            } />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faSyringe} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d18} defaultValue={data.fields.d18} />\r\n                                            } />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faSyringe} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d19} defaultValue={data.fields.d19} />\r\n                                            } />\r\n                                    ]} />\r\n                                </Col>\r\n\r\n                                <Col lg={4}>\r\n                                    <CardSection\r\n                                        titleItems={[null, \"Вес:\", \"МДП:\", \"АД:\", \"Пульс:\"]}\r\n                                        contentItems={[\r\n                                            <Form.Control as=\"input\" size=\"sm\" type=\"text\" disabled value=\"До ГД\" />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faWeight} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d20} defaultValue={data.fields.d20} />\r\n                                            } />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faCircle} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" disabled\r\n                                                        value={data.fields.d64} />\r\n                                            } />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faStethoscope} />} \r\n                                                controlElement={\r\n                                                    <React.Fragment>\r\n                                                        <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                            ref={dcardFields.d21a} defaultValue={data.fields.d21a} />\r\n                                                        <div className=\"input-group-prepend input-group-append\">\r\n                                                            <InputGroup.Text>/</InputGroup.Text>\r\n                                                        </div>                                                  \r\n                                                        <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                            ref={dcardFields.d21b} defaultValue={data.fields.d21b} />\r\n                                                    </React.Fragment>\r\n                                            } />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faHeartbeat} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d22} defaultValue={data.fields.d22} />\r\n                                            } />\r\n                                    ]} />\r\n                                </Col>\r\n\r\n                                <Col lg={12}></Col>\r\n\r\n                                <Col lg={8}>\r\n                                    <CardSection\r\n                                        titleItems={[\r\n                                            null, \r\n                                            \"Состояние:\", \r\n                                            null, \r\n                                            null, \r\n                                            null,\r\n                                            null,\r\n                                            \"Тоны сердца:\",\r\n                                            \"Живот:\",\r\n                                            null,\r\n                                            null,\r\n                                            null\r\n                                        ]}\r\n                                        contentItems={[ \r\n                                            <Form.Control as=\"input\" size=\"sm\" type=\"text\" disabled value=\"До ГД\" />,\r\n                                            <Form.Control size=\"sm\" as=\"select\"\r\n                                                ref={dcardFields.d25} defaultValue={data.fields.d25}>\r\n                                                <option value=\"1\">удовлетворительное</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"2\">относительно удовлетворительное</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"3\">средней тяжести</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"4\">тяжелое</option>\r\n                                            </Form.Control>,\r\n                                            <React.Fragment>\r\n                                                <Form.Check inline label=\"Жалобы\" type=\"checkbox\"\r\n                                                    ref={dcardFields.d23} defaultChecked={data.fields.d23 !== 0} />\r\n                                                <Form.Check inline label=\"Оттеки\" type=\"checkbox\"\r\n                                                    ref={dcardFields.d24} defaultChecked={data.fields.d24 !== 0} />\r\n                                            </React.Fragment>,\r\n                                            <Form.Control as=\"input\" size=\"sm\" type=\"text\" disabled value=\"Органы дыхания:\" />,\r\n                                            <React.Fragment>\r\n                                                <Form.Check inline label=\"Изменения\" type=\"checkbox\"\r\n                                                    ref={dcardFields.d26} defaultChecked={data.fields.d26 !== 0} />\r\n                                                <Form.Check inline label=\"Хрипы\" type=\"checkbox\"\r\n                                                    ref={dcardFields.d27} defaultChecked={data.fields.d27 !== 0} />\r\n                                            </React.Fragment>,\r\n                                            <Form.Control as=\"input\" size=\"sm\" type=\"text\" placeholder=\"локализация\"\r\n                                                ref={dcardFields.d28} defaultValue={data.fields.d28} />,\r\n                                            <Form.Control size=\"sm\" as=\"select\"\r\n                                                ref={dcardFields.d29} defaultValue={data.fields.d29}>\r\n                                                <option value=\"1\">ритмичные</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"2\">аритмичные</option>\r\n                                            </Form.Control>,                          \r\n                                            <Row>\r\n                                                <Col sm={6} className=\"sav2-stomach-select\">\r\n                                                    <Form.Control size=\"sm\" as=\"select\"\r\n                                                        ref={dcardFields.d30} defaultValue={data.fields.d30}>\r\n                                                        <option value=\"1\">мягкий</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t        <option value=\"2\">твердый</option>\r\n                                                    </Form.Control>\r\n                                                </Col>\r\n                                                <Col sm={6} className=\"sav2-stomach-select\">\r\n                                                    <Form.Control size=\"sm\" as=\"select\"\r\n                                                        ref={dcardFields.d31} defaultValue={data.fields.d31}>\r\n                                                        <option value=\"1\">безболезненный</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t        <option value=\"2\">болезненный</option>\r\n                                                    </Form.Control>\r\n                                                </Col>\r\n                                            </Row>,\r\n                                            <Form.Control as=\"input\" size=\"sm\" type=\"text\" placeholder=\"локализация\"\r\n                                                ref={dcardFields.d32} defaultValue={data.fields.d32} />,\r\n                                            <Row>\r\n                                                <Col sm={6}>\r\n                                                    <Row>\r\n                                                        <Form.Label className=\"sav2-lb-sm\" column sm=\"auto\" md=\"auto\" lg=\"auto\">\r\n                                                            Область AVF:\r\n                                                        </Form.Label>\r\n                                                        <Col>\r\n                                                            <Form.Control size=\"sm\" as=\"select\"\r\n                                                                ref={dcardFields.d33} defaultValue={data.fields.d33}>\r\n                                                                <option value=\"1\">без воспалений</option>\r\n                                                                <option value=\"2\">воспалена</option>\r\n                                                            </Form.Control>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Col>\r\n                                                <Col sm={6}>\r\n                                                    <Row>\r\n                                                        <Form.Label className=\"sav2-lb-sm\" column sm=\"auto\" md=\"auto\" lg=\"auto\">\r\n                                                            Шум AVF:\r\n                                                        </Form.Label>\r\n                                                        <Col>\r\n                                                            <Form.Control size=\"sm\" as=\"select\"\r\n                                                                ref={dcardFields.d34} defaultValue={data.fields.d34}>\r\n                                                                <option value=\"1\">удовлетворительное</option>\r\n                                                                <option value=\"2\">ослабленное</option>\r\n                                                                <option value=\"3\">не выслушивается</option>\r\n                                                            </Form.Control>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Col>\r\n                                            </Row>,\r\n                                            <Form.Control as=\"input\" size=\"sm\" type=\"text\" placeholder=\"доп. информация\"\r\n                                                ref={dcardFields.d35} defaultValue={data.fields.d35} />\r\n                                    ]} />\r\n                                </Col>\r\n\r\n                                <Col lg={12}></Col>\r\n\r\n                                <Col lg={4}>\r\n                                    <CardSection\r\n                                        titleItems={[null, null, null, null, null, null, null]}\r\n                                        contentItems={[\r\n                                            <Form.Control as=\"input\" size=\"sm\" type=\"text\" disabled value=\"Назначения:\" />,\r\n                                            <AddonInputAddonField \r\n                                                preAddonText={<span>Эпоэтин &alpha;</span>}\r\n                                                postAddonText=\"ME\"\r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d36} defaultValue={data.fields.d36} />\r\n                                            } />,\r\n                                            <AddonInputAddonField \r\n                                                preAddonText={<span>Эпоэтин &beta;</span>}\r\n                                                postAddonText=\"ME\"\r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d37} defaultValue={data.fields.d37} />\r\n                                            } />,\r\n                                            <AddonInputAddonField \r\n                                                preAddonText=\"Аранесп\"\r\n                                                postAddonText=\"мкг\"\r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d38} defaultValue={data.fields.d38} />\r\n                                            } />,\r\n                                            <AddonInputAddonField \r\n                                                preAddonText=\"Мирцера\"\r\n                                                postAddonText=\"мкг\"\r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d39} defaultValue={data.fields.d39} />\r\n                                            } />,\r\n                                            <Form.Label className=\"sav2-lb-sm\">\r\n                                                Способ введения в конце ГД:\r\n                                            </Form.Label>,\r\n                                            <Form.Control size=\"sm\" as=\"select\"\r\n                                                ref={dcardFields.d40} defaultValue={data.fields.d40}>\r\n                                                <option value=\"1\">подкожно</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"2\">внутривенно</option>\r\n                                            </Form.Control>\r\n                                    ]} />\r\n                                </Col>\r\n\r\n                                <Col lg={4}>\r\n                                    <CardSection\r\n                                        titleItems={[null, null, null, null, null, null, null]}\r\n                                        contentItems={[\r\n                                            <Form.Control as=\"input\" size=\"sm\" type=\"text\" disabled value=\"Назначения:\" />,\r\n                                            <Form.Label className=\"sav2-lb-sm\">\r\n                                                в/в за 40 мин до окончания ГД дробно медленно:\r\n                                            </Form.Label>,\r\n                                            <AddonInputAddonField \r\n                                                preAddonText=\"Железа декстран\"\r\n                                                postAddonText=\"мг\"\r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d41} defaultValue={data.fields.d41} />\r\n                                            } />,\r\n                                            <AddonInputAddonField \r\n                                                preAddonText=\"Железа сахарат\"\r\n                                                postAddonText=\"мг\"\r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d42} defaultValue={data.fields.d42} />\r\n                                            } />,\r\n                                            <Form.Label className=\"sav2-lb-sm\">\r\n                                                в/в в конце ГД:\r\n                                            </Form.Label>,\r\n                                            <AddonInputAddonField \r\n                                                preAddonText=\"Витамин-C\"\r\n                                                postAddonText=\"мг\"\r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d43} defaultValue={data.fields.d43} />\r\n                                            } />,\r\n                                            <Form.Check inline label=\"Витамин-B  500 мкг\" type=\"checkbox\"\r\n                                                ref={dcardFields.d44} defaultChecked={data.fields.d44 !== 0} />\r\n                                    ]} />\r\n                                </Col>\r\n                            </Row>\r\n                        </Tab>\r\n\r\n                        <Tab eventKey=\"afterGD\" title=\"После ГД\">\r\n                            <hr />\r\n                            <Row>\r\n                                <Col lg={4}>\r\n                                    <CardSection\r\n                                        titleItems={[null, \"Вес:\", \"Удалено:\", \"АД:\", \"Пульс:\"]}\r\n                                        contentItems={[\r\n                                            <Form.Control as=\"input\" size=\"sm\" type=\"text\" disabled value=\"После ГД\" />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faWeight} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d45} defaultValue={data.fields.d45} />\r\n                                            } />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faBalanceScale} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" disabled\r\n                                                        value={data.fields.d46} />\r\n                                            } />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faStethoscope} />} \r\n                                                controlElement={\r\n                                                    <React.Fragment>\r\n                                                        <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                            ref={dcardFields.d47a} defaultValue={data.fields.d47a} />\r\n                                                        <div className=\"input-group-prepend input-group-append\">\r\n                                                            <InputGroup.Text>/</InputGroup.Text>\r\n                                                        </div>                                                  \r\n                                                        <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                            ref={dcardFields.d47b} defaultValue={data.fields.d47b} />\r\n                                                    </React.Fragment>\r\n                                            } />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faHeartbeat} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d48} defaultValue={data.fields.d48} />\r\n                                            } />\r\n                                    ]} />\r\n                                </Col>\r\n\r\n                                <Col lg={4}>\r\n                                    <CardSection\r\n                                        titleItems={[\"KT/V:\", \"V перф. крови:\", \"V замещения:\"]}\r\n                                        contentItems={[\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faSyringe} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d49} defaultValue={data.fields.d49} />\r\n                                            } />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faSyringe} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d50} defaultValue={data.fields.d50} />\r\n                                            } />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faSyringe} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d51} defaultValue={data.fields.d51} />\r\n                                            } />\r\n                                    ]} />\r\n                                </Col>\r\n\r\n                                <Col lg={4}>\r\n                                    <CardSection\r\n                                        titleItems={[\"Глюкоза до ГД:\", \"Глюкоза после ГД:\", \"Температура тела:\"]}\r\n                                        contentItems={[\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faSyringe} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d52} defaultValue={data.fields.d52} />\r\n                                            } />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faSyringe} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d53} defaultValue={data.fields.d53} />\r\n                                            } />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faThermometerHalf} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d54} defaultValue={data.fields.d54} />\r\n                                            } />\r\n                                    ]} />\r\n                                </Col>\r\n\r\n                                <Col lg={12}></Col>\r\n\r\n                                <Col lg={8}>\r\n                                    <CardSection\r\n                                        titleItems={[null, \"Состояние:\", null, null, null, null]}\r\n                                        contentItems={[\r\n                                            <Form.Control as=\"input\" size=\"sm\" type=\"text\" disabled value=\"После ГД\" />,\r\n                                            <Form.Control size=\"sm\" as=\"select\"\r\n                                                ref={dcardFields.d60} defaultValue={data.fields.d60}>\r\n                                                <option value=\"1\">удовлетворительное</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"2\">относительно удовлетворительное</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"3\">средней тяжести</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"4\">тяжелое</option>\r\n                                            </Form.Control>,\r\n                                            <Form.Check inline label=\"Жалобы\" type=\"checkbox\"\r\n                                                ref={dcardFields.d59} defaultChecked={data.fields.d59 !== 0} />,\r\n                                            <Form.Check inline label=\"Течение ГД осложнения\" type=\"checkbox\"\r\n                                                ref={dcardFields.d61} defaultChecked={data.fields.d61 !== 0} />,\r\n                                            <Form.Check inline label=\"Требуется изменение терапии и диализной программы\" type=\"checkbox\"\r\n                                                ref={dcardFields.d62} defaultChecked={data.fields.d62 !== 0} />,\r\n                                            <Form.Control as=\"input\" size=\"sm\" type=\"text\" placeholder=\"доп. информация\"\r\n                                                ref={dcardFields.d63} defaultValue={data.fields.d63} />\r\n                                    ]} />\r\n                                </Col>\r\n\r\n                                <Col lg={4}>\r\n                                    <CardSection\r\n                                        titleItems={[null, \"Ca++:\", \"K+:\", \"Na+:\", null]}\r\n                                        contentItems={[\r\n                                            <Form.Control as=\"input\" size=\"sm\" type=\"text\" disabled value=\"Электролиты\" />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faSyringe} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d55} defaultValue={data.fields.d55} />\r\n                                            } />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faSyringe} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d56} defaultValue={data.fields.d56} />\r\n                                            } />,\r\n                                            <AddonInputField \r\n                                                addonText={<FontAwesomeIcon icon={faSyringe} />} \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\" className=\"no-placeholder\"\r\n                                                        ref={dcardFields.d57} defaultValue={data.fields.d57} />\r\n                                            } />,\r\n                                            <AddonInputField \r\n                                                addonText=\"ЭКГ:\" \r\n                                                controlElement={\r\n                                                    <Form.Control as=\"input\" type=\"text\"\r\n                                                        ref={dcardFields.d58} defaultValue={data.fields.d58} />\r\n                                            } />,\r\n                                    ]} />\r\n                                </Col>\r\n                            </Row>\r\n                        </Tab>\r\n                    </Tabs>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <hr />\r\n                </Col>\r\n                <Col lg={12}>\r\n                    <Button variant=\"primary\" size=\"lg\" block onClick={handleClick}>Записать</Button>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n        );\r\n    } else {\r\n        return (\r\n            <Row className=\"justify-content-lg-center\">\r\n                <Col lg=\"auto\">\r\n                    Карта не выбрана.\r\n                    Для начала работы с картой необходимо её выбрать \r\n                    из <b>Картотеки</b> (кнопка <i>\"Работа с картой\"</i>)\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChosenCardForm;\r\n","import React, { useContext } from 'react';\r\nimport './UpdateChosenCardModal.css';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport cardFields from 'App/Utils/cardFields';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport processException from 'App/Utils/processException';\r\nimport makeFixedFormat from 'App/Utils/makeFixedFormat';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\n\r\n\r\nfunction UpdateChosenCardModal(props) {\r\n\r\n    const appDispatch = useContext(AppDispatch);\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const {\r\n        cardID, \r\n        data,\r\n        prevFields,\r\n        userData\r\n    } = props;\r\n\r\n    const loadingTriggers = [\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];\r\n\r\n    const handleClose = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setUpdateChosenCardModal',\r\n            updateChosenCardModalData: { show: false }\r\n        });\r\n    };\r\n\r\n    const anyFieldChanged = () => {\r\n        let changed = false;\r\n\r\n        cardFields.forEach((item) => {\r\n            if (prevFields[item] !== data.currentFields[item]) {\r\n                changed = true;;\r\n            } \r\n        });\r\n\r\n        return changed;\r\n    };\r\n\r\n    const handleSave = async () => {\r\n        if (anyFieldChanged()) {\r\n            const currentdate = new Date();\r\n            const datetime = \"modification timestamp: \"\r\n                + makeFixedFormat(currentdate.getDate()) + \"-\"\r\n                + makeFixedFormat((currentdate.getMonth() + 1)) + \"-\"\r\n                + currentdate.getFullYear() + \" @ \"\r\n                + makeFixedFormat(currentdate.getHours()) + \":\"\r\n                + makeFixedFormat(currentdate.getMinutes()) + \":\"\r\n                + makeFixedFormat(currentdate.getSeconds());\r\n\r\n            const changelogVal = '|' + datetime + ' by ' + userData.userFIO + ' (id:' + userData.userID + ')';\r\n        \r\n            const fields = {\r\n                d_procedure_id \t\t\t: data.currentFields.d0.toString(),\r\n                dry_weight \t\t\t\t: data.currentFields.d2.toString(),\r\n                room \t\t\t\t\t: data.currentFields.d5.toString(),\r\n                date \t\t\t\t\t: data.currentFields.d6.toString(),\r\n                device_id \t\t\t\t: data.currentFields.d7.toString(),\r\n                dialyzer_id \t\t\t: data.currentFields.d8.toString(),\r\n                gd_period_minutes \t\t: data.currentFields.d9.toString(),\r\n                inject_speed \t\t\t: data.currentFields.d10.toString(),\r\n                dialysate_id \t\t\t: data.currentFields.d11.toString(),\r\n                stream_dita \t\t\t: data.currentFields.d12.toString(),\r\n                heparin_dose \t\t\t: data.currentFields.d13.toString(),\r\n                bolus \t\t\t\t\t: data.currentFields.d14.toString(),\r\n                vr_heparin_complete \t: data.currentFields.d15.toString(),\r\n                bicarbonate \t\t\t: data.currentFields.d16.toString(),\r\n                na \t\t\t\t\t\t: data.currentFields.d17.toString(),\r\n                v_uf \t\t\t\t\t: data.currentFields.d18.toString(),\r\n                sk_k \t\t\t\t\t: data.currentFields.d19.toString(),\r\n                pre_weight \t\t\t\t: data.currentFields.d20.toString(),\r\n                pre_ap_up \t\t\t\t: data.currentFields.d21a.toString(),\r\n                pre_ap_low \t\t\t\t: data.currentFields.d21b.toString(),\r\n                pre_pulse \t\t\t\t: data.currentFields.d22.toString(),\r\n                pre_complaint \t\t\t: data.currentFields.d23.toString(),\r\n                pre_edema \t\t\t\t: data.currentFields.d24.toString(),\r\n                pre_state_id \t\t\t: data.currentFields.d25.toString(),\r\n                pre_breath_changes \t\t: data.currentFields.d26.toString(),\r\n                pre_wheeze \t\t\t\t: data.currentFields.d27.toString(),\r\n                pre_wheeze_local \t\t: data.currentFields.d28.toString(),\r\n                pre_heart_rhythm_id \t: data.currentFields.d29.toString(),\r\n                pre_stomach_soft_id \t: data.currentFields.d30.toString(),\r\n                pre_stomach_pain_id \t: data.currentFields.d31.toString(),\r\n                pre_stomach_pain_local \t: data.currentFields.d32.toString(),\r\n                pre_area_avf_id \t\t: data.currentFields.d33.toString(),\r\n                pre_noise_avf_id \t\t: data.currentFields.d34.toString(),\r\n                pre_additions \t\t\t: data.currentFields.d35.toString(),\r\n                epoetin_alfa \t\t\t: data.currentFields.d36.toString(),\r\n                epoetin_beta \t\t\t: data.currentFields.d37.toString(),\r\n                aranesp \t\t\t\t: data.currentFields.d38.toString(),\r\n                mircera \t\t\t\t: data.currentFields.d39.toString(),\r\n                post_injection_id \t\t: data.currentFields.d40.toString(),\r\n                ferrum_dextran \t\t\t: data.currentFields.d41.toString(),\r\n                ferrum_sacch \t\t\t: data.currentFields.d42.toString(),\r\n                vit_c \t\t\t\t\t: data.currentFields.d43.toString(),\r\n                vit_b \t\t\t\t\t: data.currentFields.d44.toString(),\r\n                post_weight \t\t\t: data.currentFields.d45.toString(),\r\n                post_ap_up \t\t\t\t: data.currentFields.d47a.toString(),\r\n                post_ap_low \t\t\t: data.currentFields.d47b.toString(),\r\n                post_pulse \t\t\t\t: data.currentFields.d48.toString(),\r\n                ktv \t\t\t\t\t: data.currentFields.d49.toString(),\r\n                v_perf_blood \t\t\t: data.currentFields.d50.toString(),\r\n                v_replacement \t\t\t: data.currentFields.d51.toString(),\r\n                pre_glucose \t\t\t: data.currentFields.d52.toString(),\r\n                post_glucose \t\t\t: data.currentFields.d53.toString(),\r\n                body_temp \t\t\t\t: data.currentFields.d54.toString(),\r\n                electrolyte_ca \t\t\t: data.currentFields.d55.toString(),\r\n                electrolyte_k \t\t\t: data.currentFields.d56.toString(),\r\n                electrolyte_na\t\t\t: data.currentFields.d57.toString(),\r\n                ekg \t\t\t\t\t: data.currentFields.d58.toString(),\r\n                post_complaint \t\t\t: data.currentFields.d59.toString(),\r\n                post_state_id \t\t\t: data.currentFields.d60.toString(),\r\n                post_gd_difficulties \t: data.currentFields.d61.toString(),\r\n                post_change_required \t: data.currentFields.d62.toString(),\r\n                post_additions \t\t\t: data.currentFields.d63.toString(),\r\n                id \t\t\t\t\t\t: cardID,\r\n                changelog  \t\t\t\t: changelogVal\r\n            };\r\n\r\n            const textResponse = await fetchData(\r\n                'update_dcard',\r\n                fields,\r\n                ...loadingTriggers\r\n            );            \r\n\r\n            await mainDoctorPanelDispatch({\r\n                type: 'setUpdateChosenCardModal',\r\n                updateChosenCardModalData: { show: false }\r\n            });\r\n\r\n            const response = {\r\n                message: textResponse,\r\n                methodName: 'UpdateChosenCardModal.handleSave()',\r\n                representError: (errorInfo) => {\r\n                    mainDoctorPanelDispatch({\r\n                        type: 'setInfoBox',\r\n                        infoBoxData: { variant: 'danger', text: errorInfo, show: true }\r\n                    });\r\n                }\r\n            };\r\n\r\n            if (!processException(response)) {\r\n                await mainDoctorPanelDispatch({\r\n                    type: 'setChosenCardData',\r\n                    chosenCardData: { \r\n                        fields: data.currentFields\r\n                    }\r\n                });\r\n                \r\n                mainDoctorPanelDispatch({\r\n                    type: 'setInfoBox',\r\n                    infoBoxData: { variant: 'info', text: textResponse, show: true }\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const message = (anyFieldChanged() ? \r\n        'Произвести запись изменений по карте под номером id: '+ cardID +' ?' : \r\n        'Запись данных невозможна. Ни одно из полей не было изменено');\r\n\r\n    return (\r\n        <Modal show={data.show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Запись данных:</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {message}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"primary\" disabled={!anyFieldChanged()} onClick={handleSave}>Записать</Button>\r\n                <Button variant=\"secondary\" onClick={handleClose}>Отмена</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default UpdateChosenCardModal;\r\n","import React from 'react';\r\nimport './TabChosenCard.css';\r\nimport Menu from './Menu';\r\nimport ChosenCardForm from './ChosenCardForm';\r\nimport UpdateChosenCardModal from './UpdateChosenCardModal';\r\n\r\n\r\nfunction TabChosenCard(props) {\r\n\r\n    const {\r\n        panelData,\r\n        chosenCardData,\r\n        printCardHandler,\r\n        updateChosenCardModalData\r\n    } = props;\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <Menu data={panelData} cardID={chosenCardData.cardID} printCard={printCardHandler} />\r\n            <hr />\r\n            <ChosenCardForm data={chosenCardData} />\r\n            <br />\r\n            <br />\r\n            <UpdateChosenCardModal \r\n                cardID={chosenCardData.cardID} \r\n                data={updateChosenCardModalData} \r\n                prevFields={chosenCardData.fields}\r\n                userData={panelData} />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default TabChosenCard;\r\n","import React, { useRef, useImperativeHandle, forwardRef } from 'react';\r\nimport './PrintForm.css';\r\nimport { REST_SERVICE_URL } from 'App/Utils/fetchData';\r\n\r\nfunction ForwardedPrintForm(props, ref) {\r\n\r\n    const formRef = useRef(null);\r\n\r\n    const { data } = props;\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        submit: () => {\r\n            formRef.current.submit();\r\n        }\r\n    }));\r\n\r\n    return (\r\n        <form ref={formRef} method=\"post\" target=\"_blank\" action={ REST_SERVICE_URL+\"print_dcard/\" }>\r\n            <input name=\"id\" hidden readOnly value={data.cardID} />\r\n            <input name=\"printtype\" hidden readOnly value={data.printType} />\r\n        </form>\r\n    );\r\n}\r\n\r\nconst PrintForm = forwardRef(ForwardedPrintForm);\r\n\r\nexport default PrintForm;\r\n","import React, { useContext, useEffect, useRef } from 'react';\r\nimport './DoctorPanel.css';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\nimport useMainDoctorPanelReducer from 'App/Utils/useMainDoctorPanelReducer';\r\nimport MainMenu from './Components/MainMenu';\r\nimport InfoBox from 'App/WorkPanels/MainDoctorPanel/Components/InfoBox';\r\nimport TabPatients from 'App/WorkPanels/MainDoctorPanel/Components/TabPatients';\r\nimport TabCardIndex from 'App/WorkPanels/MainDoctorPanel/Components/TabCardIndex';\r\nimport TabChosenCard from 'App/WorkPanels/MainDoctorPanel/Components/TabChosenCard';\r\nimport PrintForm from 'App/WorkPanels/MainDoctorPanel/Components/PrintForm';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport processException from 'App/Utils/processException';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\n\r\nfunction DoctorPanel(props) {\r\n\r\n    const appDispatch = useContext(AppDispatch);\r\n\r\n    const loadingTriggers = [\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];\r\n\r\n    const { panelData } = props;\r\n\r\n    const printFormRef = useRef(null);\r\n\r\n    //Reducer -- start:\r\n    const initialState = {\r\n        infoBox: {\r\n            variant: 'info',\r\n            text: '',\r\n            show: false\r\n        },\r\n        panelTabs: {\r\n            showPatientsTab: true,\r\n            showCardIndexTab: false,\r\n            showChosenCardTab: false\r\n        },\r\n        paginators: {\r\n            tabPatientsPage: 1,\r\n            tabCardIndexPage: 1\r\n        },\r\n        printForm: {\r\n            cardID: '', \r\n            printType: ''\r\n        },\r\n        //TabPatients\r\n        patientsSearchFields: {\r\n            patientID: '',\r\n            patientAmbnum: '',\r\n            patientBirthdate: '',\r\n            patientFio: ''\r\n        },\r\n        patientsData: {\r\n            countrows: 0,\r\n            page: 0,\r\n            perpage: 25,\r\n            rowitems: []\r\n        },\r\n        insertPatientModal: {\r\n            show: false\r\n        },\r\n        updatePatientModal: {\r\n            show: false,\r\n            idVal: '',\r\n            fioVal: '',\r\n            birthdateVal: '',\r\n            heightVal: '',\r\n            ambnumVal: ''\r\n        },\r\n        insertCardModal: {\r\n            show: false,\r\n            patientIDVal: '',\r\n            patientFioVal: ''\r\n        },\r\n        //TabCardIndex\r\n        cardIndexSearchFields: {\r\n            cardID: '',\r\n            patientID: '',\r\n            patientAmbnum: '',\r\n            cardDate: '',\r\n            patientFio: '',\r\n            patientIDIsRed: false\r\n        },\r\n        cardIndexData: {\r\n            countrows: 0,\r\n            page: 0,\r\n            perpage: 25,\r\n            rowitems: []\r\n        },\r\n        deleteCardModal: {\r\n            show: false,\r\n            cardIDVal: ''\r\n        },\r\n        //TabUsers\r\n        \r\n        //TabCardsValidation\r\n        \r\n        //ChosenCard\r\n        chosenCardData : {\r\n            cardID: '',\r\n            entity: 'dcard',\r\n            fields: {}\r\n        },\r\n        updateChosenCardModal: {\r\n            show: false,\r\n            currentFields: {}\r\n        }\r\n    };\r\n\r\n    const [state, dispatch] = useMainDoctorPanelReducer(initialState);\r\n    //Reducer -- end;\r\n\r\n    const {\r\n        infoBox,    \r\n        panelTabs,\r\n        paginators,\r\n        printForm,\r\n        //TabPatients\r\n        patientsSearchFields,\r\n        patientsData,\r\n        insertPatientModal,\r\n        updatePatientModal,\r\n        insertCardModal,\r\n        //TabCardIndex\r\n        cardIndexSearchFields,\r\n        cardIndexData,\r\n        deleteCardModal,\r\n        //TabUsers\r\n        \r\n        //TabCardsValidation\r\n        \r\n        //ChosenCard\r\n        chosenCardData,\r\n        updateChosenCardModal\r\n    } = state;\r\n\r\n    //Patients\r\n    useEffect(() => {\r\n        if (panelTabs.showPatientsTab && \r\n            !insertPatientModal.show &&\r\n            !updatePatientModal.show) {\r\n            selectPatients();\r\n        }//eslint-disable-next-line\r\n    }, [\r\n        panelTabs.showPatientsTab,\r\n        paginators.tabPatientsPage,\r\n        patientsSearchFields,\r\n        insertPatientModal,\r\n        updatePatientModal\r\n    ]);\r\n    \r\n    //CardIndex\r\n    useEffect(() => {\r\n        if (panelTabs.showCardIndexTab &&\r\n            !deleteCardModal.show) {\r\n            selectCards();\r\n        }//eslint-disable-next-line\r\n    }, [\r\n        panelTabs.showCardIndexTab,\r\n        paginators.tabCardIndexPage,\r\n        cardIndexSearchFields,\r\n        deleteCardModal\r\n    ]);\r\n\r\n    //Users\r\n    \r\n\r\n    //CardsValidation\r\n    \r\n\r\n    const printCard = () => {\r\n        printFormRef.current.submit();\r\n    };\r\n    \r\n    const getActiveTab = () => {\r\n        let activeTab = 'default';\r\n\r\n        for (let key in panelTabs) {\r\n            if (panelTabs[key]) {\r\n                activeTab = key;\r\n            }\r\n        }\r\n\r\n        const activeTabs = {\r\n            'showPatientsTab':\r\n                <TabPatients panelData={panelData}\r\n                    insertPatientModalData={insertPatientModal}\r\n                    updatePatientModalData={updatePatientModal}\r\n                    insertCardModalData={insertCardModal}\r\n                    paginatorData={paginators.tabPatientsPage}\r\n                    patientsData={patientsData}\r\n                    patientsSearchFieldsData={patientsSearchFields} />,\r\n            'showCardIndexTab': \r\n                <TabCardIndex panelData={panelData}\r\n                    paginatorData={paginators.tabCardIndexPage}\r\n                    printCardHandler={printCard}\r\n                    cardIndexData={cardIndexData}\r\n                    cardIndexSearchFieldsData={cardIndexSearchFields}\r\n                    deleteCardModalData={deleteCardModal}\r\n                    chosenCardID={chosenCardData.cardID} />,\r\n            'showChosenCardTab': \r\n                <TabChosenCard panelData={panelData} \r\n                    chosenCardData={chosenCardData}\r\n                    printCardHandler={printCard}\r\n                    updateChosenCardModalData={updateChosenCardModal} />,\r\n            'default':\r\n                <TabPatients panelData={panelData}\r\n                    insertPatientModalData={insertPatientModal}\r\n                    updatePatientModalData={updatePatientModal}\r\n                    insertCardModalData={insertCardModal}\r\n                    paginatorData={paginators.tabPatientsPage}\r\n                    patientsData={patientsData}\r\n                    patientsSearchFieldsData={patientsSearchFields} />\r\n        }\r\n\r\n        return (activeTabs[activeTab] || activeTabs['default']);\r\n        //return activeTabs[activeTab];\r\n    };\r\n\r\n    const doSelect = async (selectData) => {\r\n        const textResponse = await fetchData(\r\n            selectData.apiMethod,\r\n            selectData.searchParams,\r\n            ...loadingTriggers\r\n        );\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: selectData.methodName,\r\n            representError: (errorInfo) => {\r\n                dispatch({\r\n                    type: 'setInfoBox',\r\n                    infoBoxData: { variant: 'danger', text: errorInfo, show: true }\r\n                });\r\n            }\r\n        };\r\n\r\n        if (!processException(response)) {\r\n            const jsonResponse = JSON.parse(textResponse);\r\n            selectData.processResult(jsonResponse);\r\n        }\r\n    };\r\n\r\n    const selectPatients = async () => {\r\n        const searchParams = {\r\n            page:       (paginators.tabPatientsPage - 1),\r\n            id:         patientsSearchFields.patientID,\r\n            ambnum:     patientsSearchFields.patientAmbnum,\r\n            birthdate:  patientsSearchFields.patientBirthdate,\r\n            fio:        patientsSearchFields.patientFio\r\n        };\r\n\r\n        const selectData = {\r\n            apiMethod: 'select_patients',\r\n            searchParams: searchParams,\r\n            methodName: 'MainDoctorPanel.selectPatients()',\r\n            processResult: (jsonResponse) => {\r\n                dispatch({\r\n                    type: 'setPatientsData',\r\n                    patientsData: jsonResponse\r\n                });\r\n            }\r\n        };\r\n\r\n        await doSelect(selectData);\r\n    };\r\n    \r\n    const selectCards = async () => {\r\n        const searchParams = {\r\n            page:           (paginators.tabCardIndexPage - 1),      \r\n            id:             cardIndexSearchFields.cardID,\r\n            patientid:      cardIndexSearchFields.patientID,        \r\n            patientambnum:  cardIndexSearchFields.patientAmbnum,   \r\n            date:           cardIndexSearchFields.cardDate,\r\n            patientfio:     cardIndexSearchFields.patientFio       \r\n        };\r\n\r\n        const selectData = {\r\n            apiMethod: 'select_dcards',\r\n            searchParams: searchParams,\r\n            methodName: 'MainDoctorPanel.selectCards()',\r\n            processResult: (jsonResponse) => {\r\n                dispatch({\r\n                    type: 'setCardIndexData',\r\n                    cardIndexData: jsonResponse\r\n                });\r\n            }\r\n        };\r\n\r\n        await doSelect(selectData);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <MainDoctorPanelDispatch.Provider value={dispatch}>\r\n                <MainMenu data={panelTabs} />\r\n                <br />\r\n                <InfoBox data={infoBox} />\r\n                <br />\r\n                {getActiveTab()}\r\n                <br />\r\n                <PrintForm ref={printFormRef} data={printForm} />\r\n            </MainDoctorPanelDispatch.Provider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DoctorPanel;\r\n","import React, { useContext } from 'react';\r\nimport './MainMenu.css';\r\nimport { Row, Col, Button, ButtonGroup } from 'react-bootstrap';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\nimport processException from 'App/Utils/processException';\r\n//import { AppDispatch } from 'App';\r\n\r\nfunction MainMenu(props) {\r\n    const appDispatch = useContext(AppDispatch);\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const loadingTriggers = [\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];\r\n\r\n    const { data } = props;\r\n\r\n    const logoutIsClicked = async () => {\r\n        const textResponse = await fetchData(\r\n            'logout',\r\n            { id: '0' },\r\n            ...loadingTriggers\r\n        );\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: 'MainDoctorPanel.MainMenu.logoutIsClicked()'\r\n        };\r\n\r\n        if (!processException(response)) {\r\n            appDispatch({\r\n                type: 'setPanelData',\r\n                panelData: {\r\n                    panelID: '0',\r\n                    userID: '',\r\n                    userFIO: ''\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const menuButtonIsClicked = (e) => {\r\n        const menuButtonID = e.target.id;\r\n\r\n        let freshPanelTabs = {};\r\n\r\n        for (let item in data) {\r\n            if (item === menuButtonID) {\r\n                freshPanelTabs[item] = true;\r\n            } else {\r\n                freshPanelTabs[item] = false;\r\n            }\r\n        }\r\n        \r\n        mainDoctorPanelDispatch({\r\n            type: 'setPanelTabs',\r\n            panelTabs: freshPanelTabs\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            <Col lg={12}>\r\n                <ButtonGroup className=\"flex-wrap\">\r\n                    <Button variant=\"outline-secondary\" active={data.showPatientsTab} onClick={menuButtonIsClicked} id=\"showPatientsTab\">Пациенты</Button>\r\n                    <Button variant=\"outline-secondary\" active={data.showCardIndexTab} onClick={menuButtonIsClicked} id=\"showCardIndexTab\">Картотека</Button>\r\n                    <Button variant=\"outline-secondary\" active={data.showChosenCardTab} onClick={menuButtonIsClicked} id=\"showChosenCardTab\">Выбранная карта</Button>\r\n                    <Button variant=\"outline-secondary\" active={data.showUsersTab} onClick={menuButtonIsClicked} id=\"showUsersTab\">Пользователи</Button>\r\n                    <Button variant=\"outline-secondary\" active={data.showCardValidationTab} onClick={menuButtonIsClicked} id=\"showCardValidationTab\">Валидация карт</Button>\r\n                    <Button variant=\"primary\" onClick={logoutIsClicked} >Выйти</Button>\r\n                </ButtonGroup>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default MainMenu;\r\n","import React, { useContext } from 'react';\r\nimport './Menu.css';\r\nimport { Row, Col, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUserMd, faAddressCard } from '@fortawesome/free-solid-svg-icons';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\n\r\nfunction Menu(props) {\r\n\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const { data } = props;\r\n\r\n    const handleClick = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setInsertUserModal',\r\n            insertUserModalData: { show: true }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            <Col lg={12}>\r\n                <Row>\r\n                    <Col lg={4}>\r\n                        <InputGroup className=\"sav2-mb-1\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>\r\n                                    <FontAwesomeIcon icon={faUserMd} size=\"1x\" />\r\n                                    &nbsp;Сотрудник:\r\n                                </InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl disabled value={data.userFIO} />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col lg={4}>\r\n                        <Button onClick={handleClick}>\r\n                            <FontAwesomeIcon icon={faAddressCard} size=\"1x\" />\r\n                            &nbsp;Добавить пользователя \r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Menu;\r\n","import React, { useContext, useRef } from 'react';\r\nimport './InsertUserModal.css';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\nimport processException from 'App/Utils/processException';\r\n\r\nfunction InsertUserModal(props) {\r\n\r\n    const appDispatch = useContext(AppDispatch);\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const { data } = props;\r\n\r\n    const fioInput = useRef(null);\r\n    const loginInput = useRef(null);\r\n    const passwordInput = useRef(null);\r\n    const roleSelect = useRef(null);\r\n    \r\n    const loadingTriggers = [\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];\r\n\r\n    const handleClose = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setInsertUserModal',\r\n            insertUserModalData: { show: false }\r\n        });\r\n    };\r\n\r\n    const handleAdd = async () => {\r\n        const newUser = {\r\n            fio: fioInput.current.value.trim(),\r\n            login: loginInput.current.value.trim(),\r\n            pass: passwordInput.current.value,\r\n            role: roleSelect.current.value\r\n        };\r\n        \r\n        const textResponse = await fetchData(\r\n            'insert_user',\r\n            newUser,\r\n            ...loadingTriggers\r\n        );\r\n\r\n        mainDoctorPanelDispatch({\r\n            type: 'setInsertUserModal',\r\n            insertUserModalData: { show: false }\r\n        });\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: 'InsertUserModal.handleAdd()',\r\n            representError: (errorInfo) => {\r\n                mainDoctorPanelDispatch({\r\n                    type: 'setInfoBox',\r\n                    infoBoxData: { variant: 'danger', text: errorInfo, show: true }\r\n                });\r\n            }\r\n        };\r\n\r\n        if (!processException(response)) {\r\n            mainDoctorPanelDispatch({\r\n                type: 'setInfoBox',\r\n                infoBoxData: { variant: 'info', text: textResponse, show: true }\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal show={data.show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Ввод нового пользователя</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <p>Данные пользователя:</p>\r\n                <Form.Group>\r\n                    <Form.Label>ФИО:</Form.Label>\r\n                    <Form.Control type=\"text\" name=\"fio\" ref={fioInput}></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Логин:</Form.Label>\r\n                    <Form.Control type=\"text\" name=\"login\" ref={loginInput}></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Пароль:</Form.Label>\r\n                    <Form.Control type=\"password\" name=\"password\" ref={passwordInput}></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Роль:</Form.Label>\r\n                    <Form.Control as=\"select\" name=\"role\" ref={roleSelect}>\r\n                        <option value=\"3\">базовые права</option>\r\n                        <option value=\"1\">расширенные права</option>\r\n                    </Form.Control>\r\n                </Form.Group>              \r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={handleAdd}>Добавить</Button>\r\n                <Button variant=\"secondary\" onClick={handleClose}>Отмена</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default InsertUserModal;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport './SearchItem.css';\r\nimport { Col, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport Inputmask from 'inputmask';\r\n\r\nfunction SearchItem(props) {\r\n\r\n    const inputField = useRef(null);\r\n\r\n    const {\r\n        size,\r\n        label,\r\n        mask,\r\n        handleSearch,\r\n        name,\r\n        currentVal\r\n    } = props;\r\n\r\n    //Date-Picker -- start --\r\n    //EventListener settings\r\n    useEffect(() => {\r\n        if (mask && mask.type === 'datepicker') {\r\n            const inputElement = inputField.current;\r\n\r\n            window.jQuery(inputElement).on('change', handleChange);\r\n\r\n            return () => {\r\n                window.jQuery(inputElement).off('change', handleChange);\r\n            };\r\n        }//eslint-disable-next-line\r\n    }, []);\r\n    //Datepicker settings\r\n    useEffect(() => {\r\n        if (mask && mask.type === 'datepicker') {\r\n            const inputElement = inputField.current;\r\n\r\n            window.jQuery(inputElement).datepicker(mask.params);\r\n\r\n            return () => {\r\n                window.jQuery(inputElement).datepicker('destroy');\r\n            };\r\n        }//eslint-disable-next-line\r\n    }, []);\r\n    //Date-Picker -- end --\r\n\r\n    //Input-Mask -- start --\r\n    useEffect(() => {\r\n        if (mask && mask.type === 'inputmask') {\r\n            const inputElement = inputField.current;\r\n\r\n            Inputmask(mask.params).mask(inputElement);\r\n\r\n            return () => {\r\n                Inputmask.remove(inputElement);\r\n            };\r\n        }//eslint-disable-next-line\r\n    }, []);\r\n    //Input-Mask -- end --\r\n\r\n    //EventListener for default (without mask property) search-item\r\n    /* useEffect(() => {\r\n        if (!mask) {\r\n            const inputElement = inputField.current;\r\n            inputElement.addEventListener('change', handleChange);\r\n\r\n            return () => {\r\n                inputElement.removeEventListener('change', handleChange);\r\n            };\r\n        }\r\n    }, []); */\r\n\r\n    const searchLatency = 1000;\r\n    let delayTimer = null;\r\n\r\n    const handleChange = () => {\r\n        clearTimeout(delayTimer);\r\n\r\n        delayTimer = setTimeout(function() {\r\n            handleSearch({[name]: inputField.current.value.trim()});\r\n        }, searchLatency);\r\n    };\r\n\r\n    const handleClick = () => {\r\n        const inputElement = inputField.current;\r\n        if (inputElement.value !== '') {\r\n            inputElement.value = '';\r\n            //const ev = new Event('change', { bubbles: true });\r\n            //inputElement.dispatchEvent(ev);\r\n            handleSearch({ [name]: inputElement.value });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Col lg={size} className=\"sav2-mt-1\">\r\n            <InputGroup>\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text>{label}</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl className=\"no-placeholder\" \r\n                    ref={inputField} \r\n                    onChange={handleChange}\r\n                    defaultValue={currentVal} />\r\n                <InputGroup.Append>\r\n                    <Button variant=\"secondary\" onClick={handleClick}>\r\n                        <FontAwesomeIcon icon={faTimes} size=\"1x\" />\r\n                    </Button>\r\n                </InputGroup.Append>\r\n            </InputGroup>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default SearchItem;\r\n","import React, { useContext } from 'react';\r\nimport './Search.css';\r\nimport { Row } from 'react-bootstrap';\r\nimport SearchItem from './SearchItem';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\n\r\n\r\nfunction Search(props) {\r\n\r\n    const { data } = props;\r\n\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const doSearch = (searchParams) => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setUsersSearchFields',\r\n            usersSearchFields: searchParams\r\n        });\r\n    };\r\n\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <p>Поиск пользователей: </p>\r\n            <Row>\r\n                <SearchItem name=\"userFio\"\r\n                    size={6}\r\n                    label=\"ФИО пользователя:\"\r\n                    handleSearch={doSearch}\r\n                    currentVal={data.userFio} />\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport './TableInfo.css';\r\nimport { InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nfunction TableInfo(props) {\r\n\r\n    const { countRows } = props;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <p>Список записей:</p>\r\n            <InputGroup>\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text>Всего найдено записей:</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl disabled value={countRows} style={{maxWidth: '200px'}} />\r\n            </InputGroup>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default TableInfo;\r\n","import React, { useContext } from 'react';\r\nimport './Paginator.css';\r\nimport { Pagination } from 'react-bootstrap';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\n\r\nfunction Paginator(props) {\r\n\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n    \r\n    const { curPage, perPage, countRows } = props;\r\n\r\n    const amoutOfItems = 7;\r\n\r\n    const offset = Math.floor(7 / 2);\r\n\r\n    const numberOfPages = (Math.ceil(countRows / perPage) < 1) ? 1 : Math.ceil(countRows / perPage);\r\n    \r\n    const itemClick = (e) => {\r\n        const pageValue = e.target.attributes.pagenum.value\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabUsersPage: parseInt(pageValue) }\r\n        });\r\n    };\r\n\r\n    const prevClick = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabUsersPage: (curPage - 1 < 1) ? 1 : curPage - 1 }\r\n        });\r\n    };\r\n\r\n    const nextClick = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabUsersPage: ((curPage + 1) > numberOfPages) ? numberOfPages : curPage + 1 }\r\n        });\r\n    };\r\n    \r\n    const firstClick = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabUsersPage: 1 }\r\n        });\r\n    };\r\n\r\n    const lastClick = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabUsersPage: numberOfPages }\r\n        });\r\n    };\r\n\r\n    let items = [];\r\n\r\n    const getStartItem = () => {\r\n        if (curPage - offset <= 1) {\r\n            return 1;\r\n        } else {\r\n            if (curPage + amoutOfItems - offset > numberOfPages) {\r\n            /**\r\n             * let \r\n             *  curPage = x,\r\n             *  offset = y,\r\n             *  numberOfPages = z\r\n             * \r\n             * previous items:                   constant previous items at the end:\r\n             * 5 6 7 (8) 9 10 11  ==> 8-3        5 6 7 (8) 9 10 11  ==> 8-3 = 8-3-(3-(11-8))\r\n             * 6 7 8 (9) 10 11    ==> 9-3   >>>  5 6 7 8 (9) 10 11  ==> 9-4 = 9-3-(3-(11-9))\r\n             * 7 8 9 (10) 11      ==> 10-3  >>>  5 6 7 8 9 (10) 11  ==> 10-5 = 10-3-(3-(11-10))\r\n             * 8 9 10 (11)        ==> 11-3       5 6 7 8 9 10 (11)  ==> 11-6 = 11-3-(3-(11-11))\r\n             * \r\n             * the first expression was:\r\n             * x - y - (y - (z - x))\r\n             * \r\n             * modified expression:\r\n             * x - y - y + (z - x)\r\n             * x - 2y + z - x\r\n             * -2y + z\r\n             * z - 2y\r\n             * \r\n             * i.e. numberOfPages - (2 * offset)\r\n             */\r\n                return numberOfPages - (2 * offset);\r\n            } else { \r\n                return curPage - offset;\r\n            }\r\n        }\r\n    };\r\n\r\n    const getEndItem = () => {\r\n        if (curPage - offset <= 1) {\r\n            if (numberOfPages < amoutOfItems) {\r\n                return numberOfPages + 1;\r\n            } else {\r\n                return amoutOfItems + 1;\r\n            }\r\n        } else {\r\n            if (curPage + amoutOfItems - offset > numberOfPages) {\r\n                return numberOfPages + 1;\r\n            } else {\r\n                return curPage + amoutOfItems - offset;\r\n            }\r\n        }\r\n    };\r\n\r\n    const startItem = getStartItem();\r\n    const endItem = getEndItem();\r\n\r\n    for (let i = startItem; i < endItem; i++) {\r\n        items.push(\r\n            <Pagination.Item active={i === curPage}\r\n                key={i}\r\n                onClick={itemClick}\r\n                pagenum={i}>\r\n                {i}\r\n            </Pagination.Item>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Pagination>\r\n            <Pagination.First onClick={firstClick} disabled={curPage === 1} />\r\n            <Pagination.Prev onClick={prevClick} disabled={curPage === 1} />\r\n            {items}\r\n            <Pagination.Next onClick={nextClick} disabled={curPage === numberOfPages} />\r\n            <Pagination.Last onClick={lastClick} disabled={curPage === numberOfPages} />\r\n        </Pagination>\r\n    );\r\n}\r\n\r\nexport default Paginator;\r\n","import React, { useContext } from 'react';\r\nimport './TableRow.css';\r\nimport { OverlayTrigger, Tooltip, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faIdCard, faLock, faLockOpen } from '@fortawesome/free-solid-svg-icons';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport processException from 'App/Utils/processException';\r\n\r\n\r\nfunction TableRow(props) {\r\n\r\n    const appDispatch = useContext(AppDispatch);\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const {\r\n        userID,\r\n        userLocked,\r\n        userFio\r\n    } = props; \r\n\r\n    const loadingTriggers = [\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];\r\n\r\n    const handleUpdate = async () => {\r\n\r\n        const textResponse = await fetchData(\r\n            'select_user_by_id',\r\n            { id: userID },\r\n            ...loadingTriggers\r\n        );\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: 'TabUsers.TableField.TableRow.handleUpdate()',\r\n            representError: (errorInfo) => {\r\n                mainDoctorPanelDispatch({\r\n                    type: 'setInfoBox',\r\n                    infoBoxData: { variant: 'danger', text: errorInfo, show: true }\r\n                });\r\n            }\r\n        };\r\n\r\n        if (!processException(response)) {\r\n            const jsonResponse = JSON.parse(textResponse);\r\n            \r\n            mainDoctorPanelDispatch({\r\n                type: 'setUpdateUserModal',\r\n                updateUserModalData: { \r\n                    show: true,\r\n                    idVal: jsonResponse.fields.idUpd,\r\n                    fioVal: jsonResponse.fields.fioUserUpd,\r\n                    loginVal: jsonResponse.fields.loginUserUpd \r\n                }\r\n            });\r\n        }      \r\n    };\r\n\r\n    const handleLockUnlock = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setLockUserModal',\r\n            lockUserModalData: { \r\n                show: true,\r\n                userID: userID,\r\n                userFio: userFio,\r\n                userLocked: userLocked\r\n            }\r\n        });\r\n    };\r\n\r\n    const overlayText = (userLocked === 0 ? \r\n        'Разблокирован. Нажмите чтобы заблокировать' : \r\n        'Заблокирован. Нажмите чтобы разблокировать'\r\n    );\r\n\r\n    return (\r\n        <tr>\r\n            <td>{userFio}</td>\r\n            <td style={{textAlign: \"right\"}}>\r\n                <Button variant=\"success\" \r\n                    className=\"sav2-opt-button\" \r\n                    title=\"Изменить данные учетной записи\" \r\n                    onClick={handleUpdate}>\r\n                        <FontAwesomeIcon icon={faIdCard} size=\"1x\" />\r\n                </Button>\r\n                <OverlayTrigger\r\n                    placement=\"top\"\r\n                    overlay={<Tooltip id={userID}>{overlayText}</Tooltip>}>\r\n                        <Button variant={(userLocked === 0 ? \"info\" : \"warning\")} \r\n                            className=\"sav2-opt-button\"  \r\n                            onClick={handleLockUnlock}>\r\n                                <FontAwesomeIcon icon={(userLocked === 0 ? faLockOpen : faLock)} size=\"1x\" />\r\n                        </Button>\r\n                </OverlayTrigger>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default TableRow;\r\n","import React from 'react';\r\nimport './TableField.css';\r\nimport { Table } from 'react-bootstrap';\r\nimport TableRow from './TableRow';\r\n\r\n\r\nfunction TableField(props) {\r\n\r\n    const { rowItems } = props;\r\n\r\n    const tableRows = rowItems.map((item) => (\r\n        <TableRow key={(item[0]).toString()}\r\n            userID={(item[0]).toString()}\r\n            userLocked={item[1]}\r\n            userFio={item[2]} />\r\n    ));\r\n\r\n    return (\r\n        <Table striped>\r\n            <thead>\r\n                <tr>\r\n                    <th>ФИО сотрудника</th>\r\n                    <th style={{textAlign: \"right\"}}>Действие</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {tableRows}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default TableField;\r\n","import React, { useContext } from 'react';\r\nimport './LockUserModal.css';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport processException from 'App/Utils/processException';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\n\r\n\r\nfunction LockUserModal(props) {\r\n\r\n    const appDispatch = useContext(AppDispatch);\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const { data } = props;\r\n\r\n    const loadingTriggers = [\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];\r\n\r\n    const handleClose = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setLockUserModal',\r\n            lockUserModalData: { show: false }\r\n        });\r\n    };\r\n\r\n    const handleLockUnlock = async () => {\r\n        const apiMethod = (data.userLocked === 0 ? 'lock_user' : 'unlock_user');\r\n\r\n        const textResponse = await fetchData(\r\n            apiMethod,\r\n            { id: data.userID },\r\n            ...loadingTriggers\r\n        );\r\n\r\n        mainDoctorPanelDispatch({\r\n            type: 'setLockUserModal',\r\n            lockUserModalData: { show: false }\r\n        });\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: 'LockUserModal.handleLock()',\r\n            representError: (errorInfo) => {\r\n                mainDoctorPanelDispatch({\r\n                    type: 'setInfoBox',\r\n                    infoBoxData: { variant: 'danger', text: errorInfo, show: true }\r\n                });\r\n            }\r\n        };\r\n\r\n        if (!processException(response)) {\r\n            mainDoctorPanelDispatch({\r\n                type: 'setInfoBox',\r\n                infoBoxData: { variant: 'info', text: textResponse, show: true }\r\n            });\r\n        }\r\n    };\r\n\r\n    const titleVal = (data.userLocked === 0 ?\r\n        'Блокировка пользователя' :\r\n        'Разблокировка пользователя'    \r\n    );\r\n\r\n    const textVal = (data.userLocked === 0 ?\r\n        'Блокировать пользователя: ' + data.userFio :\r\n        'Разблокировать пользователя: ' + data.userFio\r\n    );\r\n\r\n    return (\r\n        <Modal show={data.show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{titleVal}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <p>{textVal}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={handleLockUnlock}>\r\n                    {(data.userLocked === 0 ? \"Заблокировать\" : \"Разблокировать\")}\r\n                </Button>\r\n                <Button variant=\"secondary\" onClick={handleClose}>Отмена</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default LockUserModal;\r\n","import React, { useContext, useRef } from 'react';\r\nimport './UpdateUserModal.css';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport processException from 'App/Utils/processException';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\n\r\n\r\nfunction UpdateUserModal(props) {\r\n\r\n    const appDispatch = useContext(AppDispatch);\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const { data } = props;\r\n\r\n    const fioInput = useRef(null);\r\n    const loginInput = useRef(null);\r\n    const passwordInput = useRef(null);\r\n\r\n    const loadingTriggers = [\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];   \r\n\r\n    const handleClose = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setUpdateUserModal',\r\n            updateUserModalData: { show: false }\r\n        });\r\n    };\r\n\r\n    const handleUpdate = async () => {\r\n        const freshUser = {\r\n            id: data.idVal,\r\n            fio: fioInput.current.value.trim(),\r\n            login: loginInput.current.value.trim(),\r\n            pass: passwordInput.current.value,\r\n            firstlogin: 1\r\n        };\r\n\r\n        const textResponse = await fetchData(\r\n            'update_user',\r\n            freshUser,\r\n            ...loadingTriggers\r\n        );\r\n        \r\n        mainDoctorPanelDispatch({\r\n            type: 'setUpdateUserModal',\r\n            updateUserModalData: { show: false }\r\n        });\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: 'UpdateUserModal.handleUpdate()',\r\n            representError: (errorInfo) => {\r\n                mainDoctorPanelDispatch({\r\n                    type: 'setInfoBox',\r\n                    infoBoxData: { variant: 'danger', text: errorInfo, show: true }\r\n                });\r\n            }\r\n        };\r\n\r\n        if (!processException(response)) {\r\n            mainDoctorPanelDispatch({\r\n                type: 'setInfoBox',\r\n                infoBoxData: { variant: 'info', text: textResponse, show: true }\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal show={data.show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Изменение данных пользователя</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <p>Данные пользователя:</p>\r\n                <Form.Group>\r\n                    <Form.Label>ФИО:</Form.Label>\r\n                    <Form.Control type=\"text\"\r\n                        name=\"fio\"\r\n                        ref={fioInput}\r\n                        defaultValue={data.fioVal}></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Логин:</Form.Label>\r\n                    <Form.Control type=\"text\"\r\n                        name=\"login\"\r\n                        ref={loginInput}\r\n                        defaultValue={data.loginVal}></Form.Control>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Пароль:</Form.Label>\r\n                    <Form.Control type=\"password\"\r\n                        name=\"password\"\r\n                        ref={passwordInput}></Form.Control>\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={handleUpdate}>Сохранить</Button>\r\n                <Button variant=\"secondary\" onClick={handleClose}>Отмена</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default UpdateUserModal;\r\n","import React from 'react';\r\nimport './TabUsers.css';\r\nimport Menu from './Menu';\r\nimport InsertUserModal from './InsertUserModal';\r\nimport Search from './Search';\r\nimport TableInfo from './TableInfo';\r\nimport Paginator from './Paginator';\r\nimport TableField from './TableField';\r\nimport LockUserModal from './LockUserModal';\r\nimport UpdateUserModal from './UpdateUserModal';\r\n\r\n\r\nfunction TabUsers(props) {\r\n\r\n    const {\r\n        panelData,\r\n        usersData,\r\n        paginatorData,\r\n        usersSearchFieldsData,\r\n        insertUserModalData,\r\n        lockUserModalData,\r\n        updateUserModalData\r\n    } = props;\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Menu data={panelData} />\r\n            <hr />\r\n            <Search data={usersSearchFieldsData} />\r\n            <hr />\r\n            <TableInfo countRows={usersData.countrows} />\r\n            <hr />\r\n            <Paginator curPage={paginatorData}\r\n                perPage={usersData.perpage}\r\n                countRows={usersData.countrows} />\r\n            <TableField rowItems={usersData.rowitems} />           \r\n            <hr />\r\n            <Paginator curPage={paginatorData}\r\n                perPage={usersData.perpage}\r\n                countRows={usersData.countrows} />\r\n            <br />\r\n            <br />\r\n            <InsertUserModal data={insertUserModalData} />\r\n            <LockUserModal data={lockUserModalData} />\r\n            <UpdateUserModal data={updateUserModalData} />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default TabUsers;","import React from 'react';\r\nimport './Menu.css';\r\nimport { Row, Col, InputGroup, FormControl } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUserMd } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction Menu(props) {\r\n\r\n    const { data } = props;\r\n\r\n    return (\r\n        <Row>\r\n            <Col lg={12}>\r\n                <Row>\r\n                    <Col lg={4}>\r\n                        <InputGroup className=\"sav2-mb-1\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>\r\n                                    <FontAwesomeIcon icon={faUserMd} size=\"1x\" />\r\n                                    &nbsp;Сотрудник:\r\n                                </InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl disabled value={data.userFIO} />\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Menu;\r\n","import React from 'react';\r\nimport './TableInfo.css';\r\nimport { InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nfunction TableInfo(props) {\r\n\r\n    const { countRows } = props;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <p>Список записей:</p>\r\n            <InputGroup>\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text>Всего найдено записей:</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl disabled value={countRows} style={{maxWidth: '200px'}} />\r\n            </InputGroup>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default TableInfo;\r\n","import React, { useContext } from 'react';\r\nimport './Paginator.css';\r\nimport { Pagination } from 'react-bootstrap';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\n\r\nfunction Paginator(props) {\r\n\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n    \r\n    const { curPage, perPage, countRows } = props;\r\n\r\n    const amoutOfItems = 7;\r\n\r\n    const offset = Math.floor(7 / 2);\r\n\r\n    const numberOfPages = (Math.ceil(countRows / perPage) < 1) ? 1 : Math.ceil(countRows / perPage);\r\n    \r\n    const itemClick = (e) => {\r\n        const pageValue = e.target.attributes.pagenum.value\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabCardsValidationPage: parseInt(pageValue) }\r\n        });\r\n    };\r\n\r\n    const prevClick = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabCardsValidationPage: (curPage - 1 < 1) ? 1 : curPage - 1 }\r\n        });\r\n    };\r\n\r\n    const nextClick = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabCardsValidationPage: ((curPage + 1) > numberOfPages) ? numberOfPages : curPage + 1 }\r\n        });\r\n    };\r\n    \r\n    const firstClick = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabCardsValidationPage: 1 }\r\n        });\r\n    };\r\n\r\n    const lastClick = () => {\r\n        mainDoctorPanelDispatch({\r\n            type: 'setPaginators',\r\n            paginators: { tabCardsValidationPage: numberOfPages }\r\n        });\r\n    };\r\n\r\n    let items = [];\r\n\r\n    const getStartItem = () => {\r\n        if (curPage - offset <= 1) {\r\n            return 1;\r\n        } else {\r\n            if (curPage + amoutOfItems - offset > numberOfPages) {\r\n            /**\r\n             * let \r\n             *  curPage = x,\r\n             *  offset = y,\r\n             *  numberOfPages = z\r\n             * \r\n             * previous items:                   constant previous items at the end:\r\n             * 5 6 7 (8) 9 10 11  ==> 8-3        5 6 7 (8) 9 10 11  ==> 8-3 = 8-3-(3-(11-8))\r\n             * 6 7 8 (9) 10 11    ==> 9-3   >>>  5 6 7 8 (9) 10 11  ==> 9-4 = 9-3-(3-(11-9))\r\n             * 7 8 9 (10) 11      ==> 10-3  >>>  5 6 7 8 9 (10) 11  ==> 10-5 = 10-3-(3-(11-10))\r\n             * 8 9 10 (11)        ==> 11-3       5 6 7 8 9 10 (11)  ==> 11-6 = 11-3-(3-(11-11))\r\n             * \r\n             * the first expression was:\r\n             * x - y - (y - (z - x))\r\n             * \r\n             * modified expression:\r\n             * x - y - y + (z - x)\r\n             * x - 2y + z - x\r\n             * -2y + z\r\n             * z - 2y\r\n             * \r\n             * i.e. numberOfPages - (2 * offset)\r\n             */\r\n                return numberOfPages - (2 * offset);\r\n            } else { \r\n                return curPage - offset;\r\n            }\r\n        }\r\n    };\r\n\r\n    const getEndItem = () => {\r\n        if (curPage - offset <= 1) {\r\n            if (numberOfPages < amoutOfItems) {\r\n                return numberOfPages + 1;\r\n            } else {\r\n                return amoutOfItems + 1;\r\n            }\r\n        } else {\r\n            if (curPage + amoutOfItems - offset > numberOfPages) {\r\n                return numberOfPages + 1;\r\n            } else {\r\n                return curPage + amoutOfItems - offset;\r\n            }\r\n        }\r\n    };\r\n\r\n    const startItem = getStartItem();\r\n    const endItem = getEndItem();\r\n\r\n    for (let i = startItem; i < endItem; i++) {\r\n        items.push(\r\n            <Pagination.Item active={i === curPage}\r\n                key={i}\r\n                onClick={itemClick}\r\n                pagenum={i}>\r\n                {i}\r\n            </Pagination.Item>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Pagination>\r\n            <Pagination.First onClick={firstClick} disabled={curPage === 1} />\r\n            <Pagination.Prev onClick={prevClick} disabled={curPage === 1} />\r\n            {items}\r\n            <Pagination.Next onClick={nextClick} disabled={curPage === numberOfPages} />\r\n            <Pagination.Last onClick={lastClick} disabled={curPage === numberOfPages} />\r\n        </Pagination>\r\n    );\r\n}\r\n\r\nexport default Paginator;\r\n","import React, { useContext } from 'react';\r\nimport './TableRow.css';\r\nimport { OverlayTrigger, Tooltip, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faClipboard } from '@fortawesome/free-regular-svg-icons';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport processException from 'App/Utils/processException';\r\n\r\n\r\nfunction TableRow(props) {\r\n\r\n    const appDispatch = useContext(AppDispatch);\r\n    const mainDoctorPanelDispatch = useContext(MainDoctorPanelDispatch);\r\n\r\n    const {\r\n        cardID,\r\n        cardDate,\r\n        patientID,\r\n        patientFio,\r\n        patientAmbnum,\r\n        fields\r\n    } = props;\r\n\r\n    const loadingTriggers = [\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];\r\n\r\n    const handleChoose = async () => {\r\n\r\n        const textResponse = await fetchData(\r\n            'select_dcard_by_id',\r\n            { id: cardID },\r\n            ...loadingTriggers\r\n        );\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: 'TabCardsValidation.TableField.TableRow.handleChoose()',\r\n            representError: (errorInfo) => {\r\n                mainDoctorPanelDispatch({\r\n                    type: 'setInfoBox',\r\n                    infoBoxData: { variant: 'danger', text: errorInfo, show: true }\r\n                });\r\n            }\r\n        };\r\n\r\n        if (!processException(response)) {\r\n            const jsonResponse = JSON.parse(textResponse);\r\n            \r\n            await mainDoctorPanelDispatch({\r\n                type: 'setChosenCardData',\r\n                chosenCardData: {\r\n                    ...jsonResponse,\r\n                    cardID: cardID\r\n                }\r\n            });\r\n\r\n            mainDoctorPanelDispatch({\r\n                type: 'setPanelTabs',\r\n                panelTabs: {\r\n                    showPatientsTab: false,\r\n                    showCardIndexTab: false,\r\n                    showChosenCardTab: true,\r\n                    showUsersTab: false,\r\n                    showCardValidationTab: false\r\n                }\r\n            });\r\n        } \r\n    };\r\n\r\n    return (\r\n        <tr>\r\n            <td>{cardID}</td>\r\n            <td>{cardDate}</td>\r\n            <td>\r\n                <OverlayTrigger\r\n                    placement=\"left\"\r\n                    overlay={<Tooltip id={patientID}>id: {patientID}</Tooltip>}>\r\n                    <span>{patientFio}</span>\r\n                </OverlayTrigger>\r\n            </td>\r\n            <td>{patientAmbnum}</td>\r\n            <td>{fields}</td>\r\n            <td>\r\n                <Button variant=\"success\" className=\"sav2-opt-button\" onClick={handleChoose} title=\"Работа с картой\">\r\n                    <FontAwesomeIcon icon={faClipboard} size=\"1x\" />\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default TableRow;\r\n","import React from 'react';\r\nimport './TableField.css';\r\nimport { Table, Badge } from 'react-bootstrap';\r\nimport TableRow from './TableRow';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMinusCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nfunction TableField(props) {\r\n\r\n    const { rowItems } = props;\r\n\r\n    const fieldsToValidate = [\r\n        'Сухой вес',\r\n        'Зал',\r\n        'Дата',\r\n        'Время ГД',\r\n        'Подача',\r\n        'Поток ди-та/ф.поток',\r\n        'Доза гепарина',\r\n        'Болюс',\r\n        'Вр. гепарин./оконч',\r\n        'Бикарбонат',\r\n        'Na+',\r\n        'V-уф',\r\n        'Ск.К.',\r\n        'Вес (до ГД)',\r\n        'АД-верх (до ГД)',\r\n        'АД-нижн (до ГД)',\r\n        'Пульс (до ГД)',\r\n        'Вес (после ГД)',\r\n        'АД-верх (после ГД)',\r\n        'АД-нижн (после ГД)',\r\n        'Пульс (после ГД)',\r\n        'KT/V',\r\n        'V перф. крови'\r\n    ];\r\n\r\n    const tableRows = rowItems.map((item) => {\r\n        \r\n        let fields = [];\r\n\r\n        item.forEach((value, index) => {\r\n            if (index >= 5 && index <= 27) {\r\n                if (value === '') {\r\n                    fields.push(\r\n                        <div key={index.toString()} className=\"sav2-object-li\">\r\n                            <Badge variant=\"danger\">\r\n                                <FontAwesomeIcon icon={faMinusCircle} size=\"1x\" />\r\n                            </Badge>\r\n                            &nbsp;{fieldsToValidate[index-5]}\r\n                            {/* \"-5\" coz of fieldsToValidate[0..23] but index between 5..27 */}\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n        });\r\n\r\n        return (\r\n            <TableRow key={(item[0]).toString()}\r\n                cardID={(item[0]).toString()}\r\n                cardDate={item[1]}\r\n                patientID={(item[2]).toString()}\r\n                patientFio={item[3]}\r\n                patientAmbnum={item[4]}\r\n                fields={fields} />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <Table striped>\r\n            <thead>\r\n                <tr>\r\n                    <th>id</th>\r\n                    <th>Дата процедуры</th>\r\n                    <th>Пациент</th>\r\n                    <th>№ амб. карты</th>\r\n                    <th>Поля</th>\r\n                    <th>Действие</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {tableRows}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default TableField;\r\n","import React from 'react';\r\nimport './TabCardsValidation.css';\r\nimport Menu from './Menu';\r\nimport TableInfo from './TableInfo';\r\nimport Paginator from './Paginator';\r\nimport TableField from './TableField';\r\n\r\n\r\nfunction TabCardsValidation(props) {\r\n\r\n    const {\r\n        panelData,\r\n        cardsValidationData,\r\n        paginatorData,\r\n    } = props;\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Menu data={panelData} />\r\n            <hr />\r\n            <TableInfo countRows={cardsValidationData.countrows} />\r\n            <hr />\r\n            <Paginator curPage={paginatorData}\r\n                perPage={cardsValidationData.perpage}\r\n                countRows={cardsValidationData.countrows} />\r\n            <TableField rowItems={cardsValidationData.rowitems} />           \r\n            <hr />\r\n            <Paginator curPage={paginatorData}\r\n                perPage={cardsValidationData.perpage}\r\n                countRows={cardsValidationData.countrows} />\r\n            <br />\r\n            <br />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default TabCardsValidation;","import React, { useContext, useEffect, useRef } from 'react';\r\nimport './MainDoctorPanel.css';\r\nimport MainDoctorPanelDispatch from 'App/Utils/MainDoctorPanelDispatch';\r\nimport useMainDoctorPanelReducer from 'App/Utils/useMainDoctorPanelReducer';\r\nimport MainMenu from './Components/MainMenu';\r\nimport InfoBox from './Components/InfoBox';\r\nimport TabPatients from './Components/TabPatients';\r\nimport TabCardIndex from './Components/TabCardIndex';\r\nimport TabUsers from './Components/TabUsers';\r\nimport TabCardsValidation from './Components/TabCardsValidation';\r\nimport TabChosenCard from './Components/TabChosenCard';\r\nimport PrintForm from './Components/PrintForm';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport processException from 'App/Utils/processException';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\n\r\nfunction MainDoctorPanel(props) {\r\n\r\n    const appDispatch = useContext(AppDispatch);\r\n\r\n    const loadingTriggers = [\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];\r\n\r\n    const { panelData } = props;\r\n\r\n    const printFormRef = useRef(null);\r\n\r\n    //Reducer -- start:\r\n    const initialState = {\r\n        infoBox: {\r\n            variant: 'info',\r\n            text: '',\r\n            show: false\r\n        },\r\n        panelTabs: {\r\n            showPatientsTab: true,\r\n            showCardIndexTab: false,\r\n            showChosenCardTab: false,\r\n            showUsersTab: false,\r\n            showCardValidationTab: false\r\n        },\r\n        paginators: {\r\n            tabPatientsPage: 1,\r\n            tabCardIndexPage: 1,\r\n            tabUsersPage: 1,\r\n            tabCardsValidationPage: 1\r\n        },\r\n        printForm: {\r\n            cardID: '', \r\n            printType: ''\r\n        },\r\n        //TabPatients\r\n        patientsSearchFields: {\r\n            patientID: '',\r\n            patientAmbnum: '',\r\n            patientBirthdate: '',\r\n            patientFio: ''\r\n        },\r\n        patientsData: {\r\n            countrows: 0,\r\n            page: 0,\r\n            perpage: 25,\r\n            rowitems: []\r\n        },\r\n        insertPatientModal: {\r\n            show: false\r\n        },\r\n        updatePatientModal: {\r\n            show: false,\r\n            idVal: '',\r\n            fioVal: '',\r\n            birthdateVal: '',\r\n            heightVal: '',\r\n            ambnumVal: ''\r\n        },\r\n        insertCardModal: {\r\n            show: false,\r\n            patientIDVal: '',\r\n            patientFioVal: ''\r\n        },\r\n        //TabCardIndex\r\n        cardIndexSearchFields: {\r\n            cardID: '',\r\n            patientID: '',\r\n            patientAmbnum: '',\r\n            cardDate: '',\r\n            patientFio: '',\r\n            patientIDIsRed: false\r\n        },\r\n        cardIndexData: {\r\n            countrows: 0,\r\n            page: 0,\r\n            perpage: 25,\r\n            rowitems: []\r\n        },\r\n        deleteCardModal: {\r\n            show: false,\r\n            cardIDVal: ''\r\n        },\r\n        //TabUsers\r\n        usersSearchFields: {\r\n            userFio: ''\r\n        },\r\n        usersData: {\r\n            countrows: 0,\r\n            page: 0,\r\n            perpage: 25,\r\n            rowitems: []\r\n        },\r\n        insertUserModal: {\r\n            show: false\r\n        },\r\n        lockUserModal: {\r\n            show: false,\r\n            userID: '',\r\n            userFio: '',\r\n            userLocked: false\r\n        },\r\n        updateUserModal: {\r\n            show: false,\r\n            idVal: '',\r\n            fioVal: '',\r\n            loginVal: ''\r\n        },\r\n        //TabCardsValidation\r\n        cardsValidationData: {\r\n            countrows: 0,\r\n            page: 0,\r\n            perpage: 25,\r\n            rowitems: []\r\n        },\r\n        //ChosenCard\r\n        chosenCardData : {\r\n            cardID: '',\r\n            entity: 'dcard',\r\n            fields: {}\r\n        },\r\n        updateChosenCardModal: {\r\n            show: false,\r\n            currentFields: {}\r\n        }\r\n    };\r\n\r\n    const [state, dispatch] = useMainDoctorPanelReducer(initialState);\r\n    //Reducer -- end;\r\n\r\n    const {\r\n        infoBox,    \r\n        panelTabs,\r\n        paginators,\r\n        printForm,\r\n\r\n        patientsSearchFields,\r\n        patientsData,\r\n        insertPatientModal,\r\n        updatePatientModal,\r\n        insertCardModal,\r\n\r\n        cardIndexSearchFields,\r\n        cardIndexData,\r\n        deleteCardModal,\r\n\r\n        usersSearchFields,\r\n        usersData,\r\n        insertUserModal,\r\n        lockUserModal,\r\n        updateUserModal,\r\n\r\n        cardsValidationData,\r\n\r\n        chosenCardData,\r\n        updateChosenCardModal\r\n    } = state;\r\n\r\n    //Patients\r\n    useEffect(() => {\r\n        if (panelTabs.showPatientsTab && \r\n            !insertPatientModal.show &&\r\n            !updatePatientModal.show) {\r\n            selectPatients();\r\n        }//eslint-disable-next-line\r\n    }, [\r\n        panelTabs.showPatientsTab,\r\n        paginators.tabPatientsPage,\r\n        patientsSearchFields,\r\n        insertPatientModal,\r\n        updatePatientModal\r\n    ]);\r\n    \r\n    //CardIndex\r\n    useEffect(() => {\r\n        if (panelTabs.showCardIndexTab &&\r\n            !deleteCardModal.show) {\r\n            selectCards();\r\n        }//eslint-disable-next-line\r\n    }, [\r\n        panelTabs.showCardIndexTab,\r\n        paginators.tabCardIndexPage,\r\n        cardIndexSearchFields,\r\n        deleteCardModal\r\n    ]);\r\n\r\n    //Users\r\n    useEffect(() => {\r\n        if (panelTabs.showUsersTab &&\r\n            !insertUserModal.show &&\r\n            !lockUserModal.show &&\r\n            !updateUserModal.show) {\r\n            selectUsers();\r\n        }//eslint-disable-next-line\r\n    }, [\r\n        panelTabs.showUsersTab,\r\n        paginators.tabUsersPage,\r\n        usersSearchFields,\r\n        insertUserModal,\r\n        lockUserModal,\r\n        updateUserModal\r\n    ]);\r\n\r\n    //CardsValidation\r\n    useEffect(() => {\r\n        if (panelTabs.showCardValidationTab) {\r\n            validateCards();\r\n        }//eslint-disable-next-line\r\n    }, [\r\n        panelTabs.showCardValidationTab,\r\n        paginators.TabCardsValidation\r\n    ]);\r\n\r\n    const printCard = () => {\r\n        printFormRef.current.submit();\r\n    };\r\n    \r\n    const getActiveTab = () => {\r\n        let activeTab = 'default';\r\n\r\n        for (let key in panelTabs) {\r\n            if (panelTabs[key]) {\r\n                activeTab = key;\r\n            }\r\n        }\r\n\r\n        const activeTabs = {\r\n            'showPatientsTab':\r\n                <TabPatients panelData={panelData}\r\n                    insertPatientModalData={insertPatientModal}\r\n                    updatePatientModalData={updatePatientModal}\r\n                    insertCardModalData={insertCardModal}\r\n                    paginatorData={paginators.tabPatientsPage}\r\n                    patientsData={patientsData}\r\n                    patientsSearchFieldsData={patientsSearchFields} />,\r\n            'showCardIndexTab': \r\n                <TabCardIndex panelData={panelData}\r\n                    paginatorData={paginators.tabCardIndexPage}\r\n                    printCardHandler={printCard}\r\n                    cardIndexData={cardIndexData}\r\n                    cardIndexSearchFieldsData={cardIndexSearchFields}\r\n                    deleteCardModalData={deleteCardModal}\r\n                    chosenCardID={chosenCardData.cardID} />,\r\n            'showChosenCardTab': \r\n                <TabChosenCard panelData={panelData} \r\n                    chosenCardData={chosenCardData}\r\n                    printCardHandler={printCard}\r\n                    updateChosenCardModalData={updateChosenCardModal} />,\r\n            'showUsersTab': \r\n                <TabUsers panelData={panelData} \r\n                    insertUserModalData={insertUserModal}\r\n                    paginatorData={paginators.tabUsersPage}\r\n                    usersData={usersData}\r\n                    usersSearchFieldsData={usersSearchFields}\r\n                    lockUserModalData={lockUserModal}\r\n                    updateUserModalData={updateUserModal} />,\r\n            'showCardValidationTab': \r\n                <TabCardsValidation panelData={panelData}\r\n                    paginatorData={paginators.tabCardsValidationPage}\r\n                    cardsValidationData={cardsValidationData} />,\r\n            'default':\r\n                <TabPatients panelData={panelData}\r\n                    insertPatientModalData={insertPatientModal}\r\n                    updatePatientModalData={updatePatientModal}\r\n                    insertCardModalData={insertCardModal}\r\n                    paginatorData={paginators.tabPatientsPage}\r\n                    patientsData={patientsData}\r\n                    patientsSearchFieldsData={patientsSearchFields} />\r\n        }\r\n\r\n        return (activeTabs[activeTab] || activeTabs['default']);\r\n        //return activeTabs[activeTab];\r\n    };\r\n\r\n    const doSelect = async (selectData) => {\r\n        const textResponse = await fetchData(\r\n            selectData.apiMethod,\r\n            selectData.searchParams,\r\n            ...loadingTriggers\r\n        );\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: selectData.methodName,\r\n            representError: (errorInfo) => {\r\n                dispatch({\r\n                    type: 'setInfoBox',\r\n                    infoBoxData: { variant: 'danger', text: errorInfo, show: true }\r\n                });\r\n            }\r\n        };\r\n\r\n        if (!processException(response)) {\r\n            const jsonResponse = JSON.parse(textResponse);\r\n            selectData.processResult(jsonResponse);\r\n        }\r\n    };\r\n\r\n    const selectPatients = async () => {\r\n        const searchParams = {\r\n            page:       (paginators.tabPatientsPage - 1),\r\n            id:         patientsSearchFields.patientID,\r\n            ambnum:     patientsSearchFields.patientAmbnum,\r\n            birthdate:  patientsSearchFields.patientBirthdate,\r\n            fio:        patientsSearchFields.patientFio\r\n        };\r\n\r\n        const selectData = {\r\n            apiMethod: 'select_patients',\r\n            searchParams: searchParams,\r\n            methodName: 'MainDoctorPanel.selectPatients()',\r\n            processResult: (jsonResponse) => {\r\n                dispatch({\r\n                    type: 'setPatientsData',\r\n                    patientsData: jsonResponse\r\n                });\r\n            }\r\n        };\r\n\r\n        await doSelect(selectData);\r\n    };\r\n    \r\n    const selectCards = async () => {\r\n        const searchParams = {\r\n            page:           (paginators.tabCardIndexPage - 1),      \r\n            id:             cardIndexSearchFields.cardID,\r\n            patientid:      cardIndexSearchFields.patientID,        \r\n            patientambnum:  cardIndexSearchFields.patientAmbnum,   \r\n            date:           cardIndexSearchFields.cardDate,\r\n            patientfio:     cardIndexSearchFields.patientFio       \r\n        };\r\n\r\n        const selectData = {\r\n            apiMethod: 'select_dcards',\r\n            searchParams: searchParams,\r\n            methodName: 'MainDoctorPanel.selectCards()',\r\n            processResult: (jsonResponse) => {\r\n                dispatch({\r\n                    type: 'setCardIndexData',\r\n                    cardIndexData: jsonResponse\r\n                });\r\n            }\r\n        };\r\n\r\n        await doSelect(selectData);\r\n    };\r\n\r\n    const selectUsers = async () => {\r\n        const searchParams = {\r\n            page: (paginators.tabUsersPage - 1),\r\n            userfio: usersSearchFields.userFio\r\n        };\r\n\r\n        const selectData = {\r\n            apiMethod: 'select_users',\r\n            searchParams: searchParams,\r\n            methodName: 'MainDoctorPanel.selectUsers()',\r\n            processResult: (jsonResponse) => {\r\n                dispatch({\r\n                    type: 'setUsersData',\r\n                    usersData: jsonResponse\r\n                });\r\n            }\r\n        };\r\n\r\n        await doSelect(selectData);\r\n    };\r\n\r\n    const validateCards = async () => {\r\n        const searchParams = {\r\n            page: (paginators.tabCardsValidationPage - 1)\r\n        };\r\n\r\n        const selectData = {\r\n            apiMethod: 'validate_dcards',\r\n            searchParams: searchParams,\r\n            methodName: 'MainDoctorPanel.validateCards()',\r\n            processResult: (jsonResponse) => {\r\n                dispatch({\r\n                    type: 'setCardsValidationData',\r\n                    cardsValidationData: jsonResponse\r\n                });\r\n            }\r\n        };\r\n\r\n        await doSelect(selectData);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <MainDoctorPanelDispatch.Provider value={dispatch}>\r\n                <MainMenu data={panelTabs} />\r\n                <br />\r\n                <InfoBox data={infoBox} />\r\n                <br />\r\n                {getActiveTab()}\r\n                <br />\r\n                <PrintForm ref={printFormRef} data={printForm} />\r\n            </MainDoctorPanelDispatch.Provider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainDoctorPanel;\r\n","import React, { useState, useContext } from 'react';\r\nimport './CreatePasswordForm.css';\r\nimport { Row, Col, Form, Button, Alert } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUserCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\nimport processException from 'App/Utils/processException';\r\n//import { AppDispatch } from 'App';\r\n\r\n\r\nfunction CreatePasswordForm(props) {\r\n\r\n    const appDispatch = useContext(AppDispatch);\r\n\r\n    const {panelData} = props;\r\n\r\n    const loadingTriggers = [\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { appDispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];\r\n\r\n    const [credentials, setCredentials] = useState({\r\n        pwd: '',\r\n        pwdRepeat: '',\r\n        buttonActive: false\r\n    });\r\n\r\n    const { pwdRepeat, buttonActive} = credentials;\r\n\r\n    const handleChange = (e) => {\r\n        const target = e.target;\r\n        const name = target.name;\r\n        const value = target.value;\r\n\r\n        setCredentials((prevCredentials) => {\r\n            let active = false;\r\n\r\n            if (name === 'pwd') {\r\n                active = (value.length !== 0 && value === prevCredentials.pwdRepeat);\r\n            } else if (name === 'pwdRepeat') {\r\n                active = (value.length !== 0 && value === prevCredentials.pwd);\r\n            }\r\n\r\n            return { \r\n                ...prevCredentials, \r\n                [name]: value, \r\n                buttonActive: active \r\n            };\r\n        });\r\n    };\r\n\r\n    const handleKeyPress = async (e) => {\r\n        const charCode = e.charCode;\r\n        //'Enter' key is pressed\r\n        if (charCode === 13 && buttonActive) {\r\n            await updateUser();\r\n            keepWorkspace();\r\n        }\r\n    };\r\n\r\n    const handleClick = async () => {\r\n        await updateUser();\r\n        keepWorkspace();\r\n    };\r\n\r\n    async function updateUser() {\r\n        const updatedUser = {\r\n            id: panelData.userID,\r\n            fio: panelData.userFIO,\r\n            pass: pwdRepeat,\r\n            firstlogin: 0\r\n        };\r\n\r\n        const textResponse = await fetchData(\r\n            'update_user',\r\n            updatedUser,\r\n            ...loadingTriggers\r\n        );\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: 'CreatePasswordForm.updateUser()'\r\n        };\r\n\r\n        if (!processException(response)) {\r\n            return textResponse;\r\n        } else {\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    async function keepWorkspace() {\r\n        const textResponse = await fetchData(\r\n            'keep_workspace',\r\n            { id: '0' },\r\n            ...loadingTriggers\r\n        );\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: 'CreatePasswordForm.keepWorkspace()'\r\n        };\r\n\r\n        if (!processException(response)) {\r\n            const panelDataJSON = JSON.parse(textResponse);\r\n            \r\n            appDispatch({\r\n                type: 'setPanelData', \r\n                panelData: panelDataJSON\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col lg={12}>\r\n                <Alert variant=\"success\">\r\n                    <FontAwesomeIcon icon={faUserCircle} size=\"lg\" />\r\n                    &nbsp;Первичный вход в систему. Пожалуйста, измените пароль на новый (уникальный) для своей учетной записи.\r\n                </Alert>\r\n            </Col>\r\n            <Col lg={12}>\r\n                <Form.Group>\r\n                    <Form.Label>Пользователь:</Form.Label>\r\n                    <Form.Control type=\"text\" name=\"usr\" readOnly value={panelData.userFIO} />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Новый пароль:</Form.Label>\r\n                    <Form.Control type=\"password\" name=\"pwd\" onChange={handleChange} onKeyPress={handleKeyPress} />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Новый пароль (повторно):</Form.Label>\r\n                    <Form.Control type=\"password\" name=\"pwdRepeat\" onChange={handleChange} onKeyPress={handleKeyPress} />\r\n                </Form.Group>\r\n                <Button disabled={!buttonActive} variant=\"primary\" size=\"lg\" block onClick={handleClick} >Изменить</Button>\r\n            </Col>\r\n        </Row>\r\n    );\r\n\r\n}\r\n\r\nexport default CreatePasswordForm;\r\n","import React from 'react';\r\nimport './Workspace.css';\r\nimport { Container } from 'react-bootstrap';\r\nimport LoginFormLockedUser from 'App/WorkPanels/LoginFormLockedUser';\r\nimport LoginForm from 'App/WorkPanels/LoginForm';\r\nimport DoctorPanel from 'App/WorkPanels/DoctorPanel';\r\nimport MainDoctorPanel from 'App/WorkPanels/MainDoctorPanel';\r\nimport CreatePasswordForm from 'App/WorkPanels/CreatePasswordForm';\r\n\r\n\r\nfunction Workspace(props) {\r\n\r\n    const { wsID, panelData } = props;\r\n\r\n    const getWorkPanel = (ID) => {\r\n        switch (ID) {\r\n            case '-2':\r\n                return <CreatePasswordForm panelData={panelData} />;\r\n            case '-1':\r\n                return <LoginFormLockedUser />; \r\n            case '0':\r\n                return <LoginForm />;\r\n            case '1':\r\n                return <MainDoctorPanel panelData={panelData} />;\r\n            case '3':\r\n                return <DoctorPanel panelData={panelData} />;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <Container className=\"sav2-main-cont\">\r\n            {getWorkPanel(wsID)}\r\n        </Container>\r\n    );\r\n\r\n}\r\n\r\nexport default Workspace;\r\n","import React from 'react';\r\nimport './LightCover.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction LightCover(props) {\r\n\r\n    const { isLoading } = props;\r\n\r\n    const style = {\r\n        visibility: isLoading ? \"visible\" : \"hidden\",\r\n        opacity: isLoading ? \"1\" : \"0\"\r\n    };\r\n\r\n    return (\r\n        <div id=\"light_cover\" style={style}>\r\n            <div className=\"light_cover_info\">\r\n                <FontAwesomeIcon icon={faSpinner} size=\"5x\" spin />\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default LightCover;","import {useReducer} from 'react';\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'setIsLoad':\r\n            return { ...state, isLoad: action.isLoad };\r\n        case 'setPanelData':\r\n            return {...state, panelData: action.panelData};\r\n        case 'alertInvalidCredentials':\r\n            window.alert('Wrong Login data');\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction useAppReducer(initialState) {\r\n    return useReducer(reducer, initialState);\r\n}\r\n\r\nexport default useAppReducer;\r\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport TopHeader from 'App/TopHeader';\r\nimport Workspace from 'App/Workspace';\r\nimport LightCover from 'App/LightCover';\r\nimport fetchData from 'App/Utils/fetchData';\r\nimport AppDispatch from 'App/Utils/AppDispatch';\r\nimport useAppReducer from 'App/Utils/useAppReducer';\r\nimport processException from 'App/Utils/processException';\r\n\r\n//const AppDispatch = React.createContext(null);\r\n\r\nfunction App(props) {\r\n\r\n    //Reducer -- start:\r\n    const initialState = {\r\n        isLoad: true,\r\n        panelData: {\r\n            panelID: null,\r\n            userID: '',\r\n            userFIO: ''\r\n        }\r\n    };\r\n\r\n    const [state, dispatch] = useAppReducer(initialState);\r\n    //Reducer -- end;\r\n\r\n    const { isLoad, panelData } = state;\r\n\r\n    const loadingTriggers = [\r\n        () => { dispatch({ type: 'setIsLoad', isLoad: true }); },\r\n        () => { dispatch({ type: 'setIsLoad', isLoad: false }); }\r\n    ];\r\n\r\n    useEffect(() => {\r\n        keepWorkspace();\r\n        //eslint-disable-next-line\r\n    }, []);\r\n\r\n    async function keepWorkspace() {\r\n        const textResponse = await fetchData(\r\n            'keep_workspace',\r\n            { id: '0' },\r\n            ...loadingTriggers\r\n        );\r\n\r\n        const response = {\r\n            message: textResponse,\r\n            methodName: 'App.keepWorkspace()'\r\n        };\r\n\r\n        if (!processException(response)) {\r\n            const panelDataJSON = JSON.parse(textResponse);\r\n            \r\n            dispatch({\r\n                type: 'setPanelData', \r\n                panelData: panelDataJSON\r\n            });\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <AppDispatch.Provider value={dispatch}>\r\n                <TopHeader />\r\n                <Workspace wsID={panelData.panelID} panelData={panelData} />\r\n                <LightCover isLoading={isLoad} />\r\n            </AppDispatch.Provider>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default App;\r\n//export {AppDispatch};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from 'App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}